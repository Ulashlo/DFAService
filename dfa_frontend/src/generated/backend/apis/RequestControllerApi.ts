/* tslint:disable */
/* eslint-disable */
/**
 * App API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: snapshot
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    IssuerRequestDTO,
    IssuerRequestDTOFromJSON,
    IssuerRequestDTOToJSON,
} from '../models';

export interface AcceptIssuerRequestRequest {
    requestId: number;
}

export interface CanselIssuerRequestRequest {
    requestId: number;
}

/**
 * RequestControllerApi - interface
 * 
 * @export
 * @interface RequestControllerApiInterface
 */
export interface RequestControllerApiInterface {
    /**
     * 
     * @summary Accept request for issuer rights.
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestControllerApiInterface
     */
    acceptIssuerRequestRaw(requestParameters: AcceptIssuerRequestRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Accept request for issuer rights.
     */
    acceptIssuerRequest(requestParameters: AcceptIssuerRequestRequest): Promise<void>;

    /**
     * 
     * @summary Add request for issuer rights.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestControllerApiInterface
     */
    addIssuerRequestRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     * Add request for issuer rights.
     */
    addIssuerRequest(): Promise<void>;

    /**
     * 
     * @summary Cancel request for issuer rights.
     * @param {number} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestControllerApiInterface
     */
    canselIssuerRequestRaw(requestParameters: CanselIssuerRequestRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancel request for issuer rights.
     */
    canselIssuerRequest(requestParameters: CanselIssuerRequestRequest): Promise<void>;

    /**
     * 
     * @summary Return all created requests for issuer rights.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestControllerApiInterface
     */
    getCreatedIssuerRequestRaw(): Promise<runtime.ApiResponse<Array<IssuerRequestDTO>>>;

    /**
     * Return all created requests for issuer rights.
     */
    getCreatedIssuerRequest(): Promise<Array<IssuerRequestDTO>>;

}

/**
 * 
 */
export class RequestControllerApi extends runtime.BaseAPI implements RequestControllerApiInterface {

    /**
     * Accept request for issuer rights.
     */
    async acceptIssuerRequestRaw(requestParameters: AcceptIssuerRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling acceptIssuerRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/request/issuer/accept/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept request for issuer rights.
     */
    async acceptIssuerRequest(requestParameters: AcceptIssuerRequestRequest): Promise<void> {
        await this.acceptIssuerRequestRaw(requestParameters);
    }

    /**
     * Add request for issuer rights.
     */
    async addIssuerRequestRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/request/issuer`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add request for issuer rights.
     */
    async addIssuerRequest(): Promise<void> {
        await this.addIssuerRequestRaw();
    }

    /**
     * Cancel request for issuer rights.
     */
    async canselIssuerRequestRaw(requestParameters: CanselIssuerRequestRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling canselIssuerRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/request/issuer/cansel/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel request for issuer rights.
     */
    async canselIssuerRequest(requestParameters: CanselIssuerRequestRequest): Promise<void> {
        await this.canselIssuerRequestRaw(requestParameters);
    }

    /**
     * Return all created requests for issuer rights.
     */
    async getCreatedIssuerRequestRaw(): Promise<runtime.ApiResponse<Array<IssuerRequestDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/request/issuer/created`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IssuerRequestDTOFromJSON));
    }

    /**
     * Return all created requests for issuer rights.
     */
    async getCreatedIssuerRequest(): Promise<Array<IssuerRequestDTO>> {
        const response = await this.getCreatedIssuerRequestRaw();
        return await response.value();
    }

}
