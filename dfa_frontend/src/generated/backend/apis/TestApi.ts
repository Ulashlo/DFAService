/* tslint:disable */
/* eslint-disable */
/**
 * App API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: snapshot
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
} from '../models';

export interface CreateEventRequest {
    amount: number;
}

export interface GetPasswordRequest {
    password: string;
}

/**
 * TestApi - interface
 * 
 * @export
 * @interface TestApiInterface
 */
export interface TestApiInterface {
    /**
     * 
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    createEventRaw(requestParameters: CreateEventRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    createEvent(requestParameters: CreateEventRequest): Promise<void>;

    /**
     * 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    getPasswordRaw(requestParameters: GetPasswordRequest): Promise<runtime.ApiResponse<string>>;

    /**
     */
    getPassword(requestParameters: GetPasswordRequest): Promise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    ownerRaw(): Promise<runtime.ApiResponse<string>>;

    /**
     */
    owner(): Promise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    qweRaw(): Promise<runtime.ApiResponse<string>>;

    /**
     */
    qwe(): Promise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiInterface
     */
    rtyRaw(): Promise<runtime.ApiResponse<string>>;

    /**
     */
    rty(): Promise<string>;

}

/**
 * 
 */
export class TestApi extends runtime.BaseAPI implements TestApiInterface {

    /**
     */
    async createEventRaw(requestParameters: CreateEventRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling createEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/mint/{amount}`.replace(`{${"amount"}}`, encodeURIComponent(String(requestParameters.amount))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createEvent(requestParameters: CreateEventRequest): Promise<void> {
        await this.createEventRaw(requestParameters);
    }

    /**
     */
    async getPasswordRaw(requestParameters: GetPasswordRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling getPassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getPassword(requestParameters: GetPasswordRequest): Promise<string> {
        const response = await this.getPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async ownerRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/owner`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async owner(): Promise<string> {
        const response = await this.ownerRaw();
        return await response.value();
    }

    /**
     */
    async qweRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/unsafe/qwe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async qwe(): Promise<string> {
        const response = await this.qweRaw();
        return await response.value();
    }

    /**
     */
    async rtyRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/rty`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async rty(): Promise<string> {
        const response = await this.rtyRaw();
        return await response.value();
    }

}
