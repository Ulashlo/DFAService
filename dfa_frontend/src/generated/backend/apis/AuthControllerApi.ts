/* tslint:disable */
/* eslint-disable */
/**
 * App API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: snapshot
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    TokenResponseDTO,
    TokenResponseDTOFromJSON,
    TokenResponseDTOToJSON,
    UserInfoForCreateDTO,
    UserInfoForCreateDTOFromJSON,
    UserInfoForCreateDTOToJSON,
} from '../models';

export interface SignInRequest {
    nickname: string;
    password: string;
}

export interface SignUpRequest {
    userInfoForCreateDTO: UserInfoForCreateDTO;
}

/**
 * AuthControllerApi - interface
 * 
 * @export
 * @interface AuthControllerApiInterface
 */
export interface AuthControllerApiInterface {
    /**
     * 
     * @summary Get fresh jwt token by username and password.
     * @param {string} nickname User\&#39;s nickname.
     * @param {string} password User\&#39;s password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    signInRaw(requestParameters: SignInRequest): Promise<runtime.ApiResponse<TokenResponseDTO>>;

    /**
     * Get fresh jwt token by username and password.
     */
    signIn(requestParameters: SignInRequest): Promise<TokenResponseDTO>;

    /**
     * 
     * @summary Create new account and return fresh jwt token.
     * @param {UserInfoForCreateDTO} userInfoForCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApiInterface
     */
    signUpRaw(requestParameters: SignUpRequest): Promise<runtime.ApiResponse<TokenResponseDTO>>;

    /**
     * Create new account and return fresh jwt token.
     */
    signUp(requestParameters: SignUpRequest): Promise<TokenResponseDTO>;

}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI implements AuthControllerApiInterface {

    /**
     * Get fresh jwt token by username and password.
     */
    async signInRaw(requestParameters: SignInRequest): Promise<runtime.ApiResponse<TokenResponseDTO>> {
        if (requestParameters.nickname === null || requestParameters.nickname === undefined) {
            throw new runtime.RequiredError('nickname','Required parameter requestParameters.nickname was null or undefined when calling signIn.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling signIn.');
        }

        const queryParameters: any = {};

        if (requestParameters.nickname !== undefined) {
            queryParameters['nickname'] = requestParameters.nickname;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/signIn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDTOFromJSON(jsonValue));
    }

    /**
     * Get fresh jwt token by username and password.
     */
    async signIn(requestParameters: SignInRequest): Promise<TokenResponseDTO> {
        const response = await this.signInRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create new account and return fresh jwt token.
     */
    async signUpRaw(requestParameters: SignUpRequest): Promise<runtime.ApiResponse<TokenResponseDTO>> {
        if (requestParameters.userInfoForCreateDTO === null || requestParameters.userInfoForCreateDTO === undefined) {
            throw new runtime.RequiredError('userInfoForCreateDTO','Required parameter requestParameters.userInfoForCreateDTO was null or undefined when calling signUp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signUp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoForCreateDTOToJSON(requestParameters.userInfoForCreateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseDTOFromJSON(jsonValue));
    }

    /**
     * Create new account and return fresh jwt token.
     */
    async signUp(requestParameters: SignUpRequest): Promise<TokenResponseDTO> {
        const response = await this.signUpRaw(requestParameters);
        return await response.value();
    }

}
