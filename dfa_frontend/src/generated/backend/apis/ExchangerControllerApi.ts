/* tslint:disable */
/* eslint-disable */
/**
 * App API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: snapshot
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    ExchangeRequestDTO,
    ExchangeRequestDTOFromJSON,
    ExchangeRequestDTOToJSON,
} from '../models';

export interface AddExchangeRequest {
    exchangeRequestDTO: ExchangeRequestDTO;
}

/**
 * ExchangerControllerApi - interface
 * 
 * @export
 * @interface ExchangerControllerApiInterface
 */
export interface ExchangerControllerApiInterface {
    /**
     * 
     * @summary Put exchange request to the exchanger.
     * @param {ExchangeRequestDTO} exchangeRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangerControllerApiInterface
     */
    addExchangeRaw(requestParameters: AddExchangeRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Put exchange request to the exchanger.
     */
    addExchange(requestParameters: AddExchangeRequest): Promise<void>;

}

/**
 * 
 */
export class ExchangerControllerApi extends runtime.BaseAPI implements ExchangerControllerApiInterface {

    /**
     * Put exchange request to the exchanger.
     */
    async addExchangeRaw(requestParameters: AddExchangeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exchangeRequestDTO === null || requestParameters.exchangeRequestDTO === undefined) {
            throw new runtime.RequiredError('exchangeRequestDTO','Required parameter requestParameters.exchangeRequestDTO was null or undefined when calling addExchange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer-jwt", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/safe/exchange`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRequestDTOToJSON(requestParameters.exchangeRequestDTO),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Put exchange request to the exchanger.
     */
    async addExchange(requestParameters: AddExchangeRequest): Promise<void> {
        await this.addExchangeRaw(requestParameters);
    }

}
