package com.hse.dfa.backend.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Exchanger extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040516200269f3803806200269f8339810160408190526200003491620000b2565b806001600160a01b038116620000825760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640160405180910390fd5b50600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055620000e4565b600060208284031215620000c557600080fd5b81516001600160a01b0381168114620000dd57600080fd5b9392505050565b6125ab80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806350a81945146100885780636bef7a2b1461009d578063873deb04146100b05780638c75d7b4146100d9578063966dae0e146100fd5780639ecebe2a14610110578063c31f271014610135578063d550a5d414610148578063e09d6c36146101a3575b600080fd5b61009b610096366004611e45565b6101b6565b005b61009b6100ab366004611f09565b610344565b6000546100c3906001600160a01b031681565b6040516100d09190611f6b565b60405180910390f35b6100ec6100e7366004611f7f565b610f29565b6040516100d0959493929190612044565b6001546100c3906001600160a01b031681565b61012361011e3660046120e3565b6113e6565b6040516100d09695949392919061210f565b61009b61014336600461215d565b61144b565b61015b6101563660046121be565b611777565b6040516100d091908151151581526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b61009b6101b1366004612245565b611c01565b6001546001600160a01b031633146101e95760405162461bcd60e51b81526004016101e0906122ea565b60405180910390fd5b6001600160a01b0383166000908152600260205260408120805490919082908590811061021857610218612319565b6000918252602090912060059091020180549091506001600160a01b03848116610100909204161461028c5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206469646e74206372656174652061207265717565737421000060448201526064016101e0565b6000600482015460ff1660018111156102a7576102a7611fd7565b141561033d576004818101805460ff191660011790556000548254600284015460405163a9059cbb60e01b81526001600160a01b039384169463a9059cbb946102f89461010090041692910161232f565b6020604051808303816000875af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190612358565b505b5050505050565b806060015181604001516000821161036e5760405162461bcd60e51b81526004016101e090612373565b6000811161038e5760405162461bcd60e51b81526004016101e090612373565b60208301516001600160a01b0381166103b95760405162461bcd60e51b81526004016101e0906123a4565b6020840151600154604051632f1d7fa760e01b81526000916001600160a01b031690632f1d7fa7906103ef908590600401611f6b565b602060405180830381865afa15801561040c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043091906123cd565b6001600160a01b031614156104855760405162461bcd60e51b815260206004820152601b60248201527a115e18da185b99d95c88199bdc88191998481b9bdd08199bdd5b99602a1b60448201526064016101e0565b60608501516000546040516370a0823160e01b815282916001600160a01b0316906370a08231906104ba903390600401611f6b565b602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb91906123ea565b10156105495760405162461bcd60e51b815260206004820152601f60248201527f53656e64657220646f6573206e6f74206861766520656e6f756768206466610060448201526064016101e0565b600054604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb91906123ea565b10156106085760405162461bcd60e51b815260206004820152601c60248201527b105b5bdd5b9d081bd988111190481a5cc81b9bdd08185b1b1bddd95960221b60448201526064016101e0565b6001546020870151604051632f1d7fa760e01b81526000926001600160a01b031691632f1d7fa79161063d9190600401611f6b565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e91906123cd565b60005460608901516040516323b872dd60e01b8152336004820152306024820152604481019190915291925082916001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190612358565b506000816001600160a01b031663d550a5d460405180608001604052808c60000151600181111561073757610737611fd7565b8152600080546001600160a01b031660208301526060808f01516040808501919091528f810151919093015290516001600160e01b031960e085901b168152610784929190600401612438565b60a060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190612453565b90506000895160018111156107dc576107dc611fd7565b1415610a3a5780511561090a57600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb9261082392909160040161232f565b6020604051808303816000875af1158015610842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108669190612358565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f2710916108c4916004016124b5565b600060405180830381600087803b1580156108de57600080fd5b505af11580156108f2573d6000803e3d6000fd5b5050600060608c0181905260408c015250610f1e9050565b600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b60000151600181111561095457610954611fd7565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff199091169083818111156109bc576109bc611fd7565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff1916908381811115610a2e57610a2e611fd7565b02179055505050610f1e565b80518015610a4c575060008960600151115b8015610a5c575060008960400151115b15610dd5578860600151816060015111158015610a8157508860400151816080015111155b15610bce576000546020820151606083015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92610ac092909160040161232f565b6020604051808303816000875af1158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190612358565b506040805160a0810182526000546001600160a01b039081168252606080850151602084015260808086015184860152858501519184019190915233908301529151630c31f27160e41b81529184169163c31f271091610b65916004016124b5565b600060405180830381600087803b158015610b7f57600080fd5b505af1158015610b93573d6000803e3d6000fd5b50505050806060015189606001818151610bad919061250c565b905250608081015160408a018051610bc690839061250c565b905250610cea565b600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92610c0892909160040161232f565b6020604051808303816000875af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b9190612358565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f271091610ca9916004016124b5565b600060405180830381600087803b158015610cc357600080fd5b505af1158015610cd7573d6000803e3d6000fd5b5050600060608c0181905260408c015250505b60608901511580610cfd57506040890151155b15610d0757610dd5565b816001600160a01b031663d550a5d460405180608001604052808c600001516001811115610d3757610d37611fd7565b81526000546001600160a01b031660208201526060808e01516040808401919091528e8101519190920152840151610d70906001612523565b6040518363ffffffff1660e01b8152600401610d8d929190612438565b60a060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190612453565b9050610a3a565b60008960400151118015610ded575060008960600151115b15610f1e57600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b600001516001811115610e3c57610e3c611fd7565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff19909116908381811115610ea457610ea4611fd7565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff1916908381811115610f1657610f16611fd7565b021790555050505b505050505050505050565b606080808080856001600160a01b038116610f565760405162461bcd60e51b81526004016101e0906123a4565b6001600160a01b038716600090815260026020908152604080832080548251818502810185019093528083529192909190849084015b82821015611050576000848152602090206040805160c08101909152600584029091018054829060ff166001811115610fc757610fc7611fd7565b6001811115610fd857610fd8611fd7565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff169081111561102c5761102c611fd7565b600181111561103d5761103d611fd7565b8152505081526020019060010190610f8c565b5050505090506000805b82518110156110e357600083828151811061107757611077612319565b602002602001015160a00151600181111561109457611094611fd7565b1480156110be5750428382815181106110af576110af612319565b60200260200101516080015110155b156110d157816110cd8161253b565b9250505b806110db8161253b565b91505061105a565b506000816001600160401b038111156110fe576110fe611e87565b604051908082528060200260200182016040528015611127578160200160208202803683370190505b5090506000826001600160401b0381111561114457611144611e87565b60405190808252806020026020018201604052801561116d578160200160208202803683370190505b5090506000836001600160401b0381111561118a5761118a611e87565b6040519080825280602002602001820160405280156111b3578160200160208202803683370190505b5090506000846001600160401b038111156111d0576111d0611e87565b6040519080825280602002602001820160405280156111f9578160200160208202803683370190505b5090506000856001600160401b0381111561121657611216611e87565b60405190808252806020026020018201604052801561123f578160200160208202803683370190505b5090506000805b88518110156113d057600089828151811061126357611263612319565b602002602001015160a00151600181111561128057611280611fd7565b1480156112aa57504289828151811061129b5761129b612319565b60200260200101516080015110155b156113be5760008982815181106112c3576112c3612319565b6020026020010151905080602001518884815181106112e4576112e4612319565b60200260200101906001600160a01b031690816001600160a01b031681525050806040015187848151811061131b5761131b612319565b602002602001018181525050806060015186848151811061133e5761133e612319565b602002602001018181525050806000015185848151811061136157611361612319565b6020026020010190600181111561137a5761137a611fd7565b9081600181111561138d5761138d611fd7565b81525050818484815181106113a4576113a4612319565b60209081029190910101526113ba600184612523565b9250505b806113c88161253b565b915050611246565b50949e939d50919b509950975095505050505050565b6002602052816000526040600020818154811061140257600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff80851697506101009094046001600160a01b031695509193909290911686565b80602001518160400151600082116114755760405162461bcd60e51b81526004016101e090612373565b600081116114955760405162461bcd60e51b81526004016101e090612373565b82516001600160a01b0381166114bd5760405162461bcd60e51b81526004016101e0906123a4565b8351600154604051632f1d7fa760e01b815233916001600160a01b031690632f1d7fa7906114ef908590600401611f6b565b602060405180830381865afa15801561150c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153091906123cd565b6001600160a01b0316146115805760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91034b9903737ba1032bc31b430b733b2b960491b60448201526064016101e0565b60808501516001600160a01b0381166115ab5760405162461bcd60e51b81526004016101e0906123a4565b85516001600160a01b031660009081526002602052604081206060880151815481106115d9576115d9612319565b600091825260208220915460808a01516040808c0151905163a9059cbb60e01b8152600590940290940194506001600160a01b039091169263a9059cbb9261162592919060040161232f565b6020604051808303816000875af1158015611644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116689190612358565b5080546000546040898101516080808c01518c516020808f015186516101009099046001600160a01b039081168a5297881691890191909152948701939093528416606086015292169183019190915260a08201527f3fcd82abd7b4aa2dae161019e066c1909e297f3a20b3b4757ef4aa36b1a122429060c00160405180910390a18660200151816001016000828254611702919061250c565b9091555050604087015160028201805460009061172090849061250c565b9091555060009050815460ff16600181111561173e5761173e611fd7565b148061174c57506001810154155b8061175957506002810154155b1561176e5760048101805460ff191660011790555b50505050505050565b6117b46040518060a0016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b82604001518360600151600082116117de5760405162461bcd60e51b81526004016101e090612373565b600081116117fe5760405162461bcd60e51b81526004016101e090612373565b60208501516001600160a01b0381166118295760405162461bcd60e51b81526004016101e0906123a4565b6020808701516001600160a01b031660009081526002825260408082208054825181860281018601909352808352929391929091849084015b82821015611926576000848152602090206040805160c08101909152600584029091018054829060ff16600181111561189d5761189d611fd7565b60018111156118ae576118ae611fd7565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff169081111561190257611902611fd7565b600181111561191357611913611fd7565b8152505081526020019060010190611862565b5092935088925050505b8151811015611bbc57600082828151811061194d5761194d612319565b6020026020010151905060018081111561196957611969611fd7565b8160a00151600181111561197f5761197f611fd7565b148061198e5750428160800151105b156119995750611baa565b600080825160018111156119af576119af611fd7565b1480156119ce575060008a5160018111156119cc576119cc611fd7565b145b15611a1c57611a1560405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611d94565b9050611b57565b600082516001811115611a3157611a31611fd7565b148015611a50575060018a516001811115611a4e57611a4e611fd7565b145b15611a9757611a1560405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611db6565b600182516001811115611aac57611aac611fd7565b148015611acb575060008a516001811115611ac957611ac9611fd7565b145b15611b1257611a15604051806040016040528084604001518152602001846060015181525060405180604001604052808d6060015181526020018d60400151815250611db6565b611b5460405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611e01565b90505b8015611ba7576040518060a0016040528060011515815260200183602001516001600160a01b03168152602001848152602001836040015181526020018360600151815250975050505050611bf8565b50505b80611bb48161253b565b915050611930565b506040518060a0016040528060001515815260200160006001600160a01b03168152602001600081526020016000815260200160008152509450505b50505092915050565b6001546001600160a01b03163314611c2b5760405162461bcd60e51b81526004016101e0906122ea565b60005b8151811015611d9057600060026000848481518110611c4f57611c4f612319565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060005b8154811015611d7b576000828281548110611c9957611c99612319565b6000918252602082206005909102019150600482015460ff166001811115611cc357611cc3611fd7565b148015611cd35750428160030154105b15611d68576004818101805460ff191660011790556000548254600284015460405163a9059cbb60e01b81526001600160a01b039384169463a9059cbb94611d239461010090041692910161232f565b6020604051808303816000875af1158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190612358565b505b5080611d738161253b565b915050611c7c565b50508080611d889061253b565b915050611c2e565b5050565b60208101518251600091148015611daf575060208301518251145b9392505050565b80518251600091611dc691612556565b82602001518460200151611dda9190612556565b148015611dec57506020820151835110155b8015611daf5750505160209190910151101590565b80518251600091611e1191612556565b82602001518460200151611e259190612556565b149392505050565b6001600160a01b0381168114611e4257600080fd5b50565b600080600060608486031215611e5a57600080fd5b8335611e6581611e2d565b9250602084013591506040840135611e7c81611e2d565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715611ebf57611ebf611e87565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611eed57611eed611e87565b604052919050565b803560028110611f0457600080fd5b919050565b600060a08284031215611f1b57600080fd5b611f23611e9d565b611f2c83611ef5565b81526020830135611f3c81611e2d565b806020830152506040830135604082015260608301356060820152608083013560808201528091505092915050565b6001600160a01b0391909116815260200190565b600060208284031215611f9157600080fd5b8135611daf81611e2d565b600081518084526020808501945080840160005b83811015611fcc57815187529582019590820190600101611fb0565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110611e4257634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b83811015611fcc57815161203281611fed565b8752958201959082019060010161201f565b60a0808252865190820181905260009060209060c0840190828a01845b828110156120865781516001600160a01b031684529284019290840190600101612061565b5050508381038285015261209a8189611f9c565b91505082810360408401526120af8187611f9c565b905082810360608401526120c3818661200b565b905082810360808401526120d78185611f9c565b98975050505050505050565b600080604083850312156120f657600080fd5b823561210181611e2d565b946020939093013593505050565b60c0810161211c88611fed565b8782526001600160a01b038716602083015260408201869052606082018590526080820184905261214c83611fed565b8260a0830152979650505050505050565b600060a0828403121561216f57600080fd5b612177611e9d565b823561218281611e2d565b8082525060208301356020820152604083013560408201526060830135606082015260808301356121b281611e2d565b60808201529392505050565b60008082840360a08112156121d257600080fd5b60808112156121e057600080fd5b50604051608081016001600160401b038111828210171561220357612203611e87565b60405261220f84611ef5565b8152602084013561221f81611e2d565b602082015260408481013590820152606080850135908201529460809093013593505050565b6000602080838503121561225857600080fd5b82356001600160401b038082111561226f57600080fd5b818501915085601f83011261228357600080fd5b81358181111561229557612295611e87565b8060051b91506122a6848301611ec5565b81815291830184019184810190888411156122c057600080fd5b938501935b838510156120d757843592506122da83611e2d565b82825293850193908501906122c5565b60208082526015908201527443616c6c6572206973206e6f7420666163746f727960581b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b80518015158114611f0457600080fd5b60006020828403121561236a57600080fd5b611daf82612348565b6020808252601790820152764e756d62657220697320657175616c20746f207a65726f60481b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6000602082840312156123df57600080fd5b8151611daf81611e2d565b6000602082840312156123fc57600080fd5b5051919050565b805161240e81611fed565b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b60a081016124468285612403565b8260808301529392505050565b600060a0828403121561246557600080fd5b61246d611e9d565b61247683612348565b8152602083015161248681611e2d565b806020830152506040830151604082015260608301516060820152608083015160808201528091505092915050565b81516001600160a01b039081168252602080840151908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b634e487b7160e01b600052601160045260246000fd5b60008282101561251e5761251e6124f6565b500390565b60008219821115612536576125366124f6565b500190565b600060001982141561254f5761254f6124f6565b5060010190565b6000816000190483118215151615612570576125706124f6565b50029056fea2646970667358221220bb46fb98ff5bc8238c9b21753d55a69a50d4b401335a8218ed9561a7f004426a64736f6c634300080b0033";

    public static final String FUNC_DFAADDRESS = "dfaAddress";

    public static final String FUNC_FACTORYADDRESS = "factoryAddress";

    public static final String FUNC_REQUESTS = "requests";

    public static final String FUNC_GETRECIPROCALREQUESTINFO = "getReciprocalRequestInfo";

    public static final String FUNC_ADDREQUEST = "addRequest";

    public static final String FUNC_TRYTOEXCHANGE = "tryToExchange";

    public static final String FUNC_GETREQUESTSBYDFA = "getRequestsByDfa";

    public static final String FUNC_CLOSEOLDREQUESTS = "closeOldRequests";

    public static final String FUNC_CLOSEREQUEST = "closeRequest";

    public static final Event EXCHANGECOMPLETED_EVENT = new Event("ExchangeCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Exchanger(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchanger(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchanger(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchanger(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ExchangeCompletedEventResponse> getExchangeCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGECOMPLETED_EVENT, transactionReceipt);
        ArrayList<ExchangeCompletedEventResponse> responses = new ArrayList<ExchangeCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExchangeCompletedEventResponse typedResponse = new ExchangeCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.firstUser = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.firstDfa = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.firstAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.secondUser = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.secondDfa = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.secondAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExchangeCompletedEventResponse> exchangeCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExchangeCompletedEventResponse>() {
            @Override
            public ExchangeCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGECOMPLETED_EVENT, log);
                ExchangeCompletedEventResponse typedResponse = new ExchangeCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.firstUser = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.firstDfa = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.firstAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.secondUser = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.secondDfa = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.secondAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExchangeCompletedEventResponse> exchangeCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGECOMPLETED_EVENT));
        return exchangeCompletedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> dfaAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DFAADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> factoryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FACTORYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>> requests(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<ReciprocalRequestInfo> getReciprocalRequestInfo(GetReciprocalRequestInfoParams info, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECIPROCALREQUESTINFO, 
                Arrays.<Type>asList(info, 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<ReciprocalRequestInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, ReciprocalRequestInfo.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addRequest(AddExchangeRequestParams data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDREQUEST, 
                Arrays.<Type>asList(data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> tryToExchange(TryToExchangeParams params) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRYTOEXCHANGE, 
                Arrays.<Type>asList(params), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> getRequestsByDfa(String dfa) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREQUESTSBYDFA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfa)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint8>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> closeOldRequests(List<String> dfaList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSEOLDREQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(dfaList, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> closeRequest(String dfa, BigInteger index, String sender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfa), 
                new org.web3j.abi.datatypes.generated.Uint256(index), 
                new org.web3j.abi.datatypes.Address(sender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Exchanger load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchanger(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchanger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchanger(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchanger load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchanger(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchanger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchanger(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchanger> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Exchanger> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Exchanger> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Exchanger> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class GetReciprocalRequestInfoParams extends StaticStruct {
        public BigInteger exchangeType;

        public String dfaToGive;

        public BigInteger amountToGive;

        public BigInteger amountToGet;

        public GetReciprocalRequestInfoParams(BigInteger exchangeType, String dfaToGive, BigInteger amountToGive, BigInteger amountToGet) {
            super(new org.web3j.abi.datatypes.generated.Uint8(exchangeType),new org.web3j.abi.datatypes.Address(dfaToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGet));
            this.exchangeType = exchangeType;
            this.dfaToGive = dfaToGive;
            this.amountToGive = amountToGive;
            this.amountToGet = amountToGet;
        }

        public GetReciprocalRequestInfoParams(Uint8 exchangeType, Address dfaToGive, Uint256 amountToGive, Uint256 amountToGet) {
            super(exchangeType,dfaToGive,amountToGive,amountToGet);
            this.exchangeType = exchangeType.getValue();
            this.dfaToGive = dfaToGive.getValue();
            this.amountToGive = amountToGive.getValue();
            this.amountToGet = amountToGet.getValue();
        }
    }

    public static class ReciprocalRequestInfo extends StaticStruct {
        public Boolean isFound;

        public String user;

        public BigInteger index;

        public BigInteger reciprocalAmountToGet;

        public BigInteger reciprocalAmountToGive;

        public ReciprocalRequestInfo(Boolean isFound, String user, BigInteger index, BigInteger reciprocalAmountToGet, BigInteger reciprocalAmountToGive) {
            super(new org.web3j.abi.datatypes.Bool(isFound),new org.web3j.abi.datatypes.Address(user),new org.web3j.abi.datatypes.generated.Uint256(index),new org.web3j.abi.datatypes.generated.Uint256(reciprocalAmountToGet),new org.web3j.abi.datatypes.generated.Uint256(reciprocalAmountToGive));
            this.isFound = isFound;
            this.user = user;
            this.index = index;
            this.reciprocalAmountToGet = reciprocalAmountToGet;
            this.reciprocalAmountToGive = reciprocalAmountToGive;
        }

        public ReciprocalRequestInfo(Bool isFound, Address user, Uint256 index, Uint256 reciprocalAmountToGet, Uint256 reciprocalAmountToGive) {
            super(isFound,user,index,reciprocalAmountToGet,reciprocalAmountToGive);
            this.isFound = isFound.getValue();
            this.user = user.getValue();
            this.index = index.getValue();
            this.reciprocalAmountToGet = reciprocalAmountToGet.getValue();
            this.reciprocalAmountToGive = reciprocalAmountToGive.getValue();
        }
    }

    public static class AddExchangeRequestParams extends StaticStruct {
        public BigInteger exchangeType;

        public String dfaToGet;

        public BigInteger amountToGet;

        public BigInteger amountToGive;

        public BigInteger endTime;

        public AddExchangeRequestParams(BigInteger exchangeType, String dfaToGet, BigInteger amountToGet, BigInteger amountToGive, BigInteger endTime) {
            super(new org.web3j.abi.datatypes.generated.Uint8(exchangeType),new org.web3j.abi.datatypes.Address(dfaToGet),new org.web3j.abi.datatypes.generated.Uint256(amountToGet),new org.web3j.abi.datatypes.generated.Uint256(amountToGive),new org.web3j.abi.datatypes.generated.Uint256(endTime));
            this.exchangeType = exchangeType;
            this.dfaToGet = dfaToGet;
            this.amountToGet = amountToGet;
            this.amountToGive = amountToGive;
            this.endTime = endTime;
        }

        public AddExchangeRequestParams(Uint8 exchangeType, Address dfaToGet, Uint256 amountToGet, Uint256 amountToGive, Uint256 endTime) {
            super(exchangeType,dfaToGet,amountToGet,amountToGive,endTime);
            this.exchangeType = exchangeType.getValue();
            this.dfaToGet = dfaToGet.getValue();
            this.amountToGet = amountToGet.getValue();
            this.amountToGive = amountToGive.getValue();
            this.endTime = endTime.getValue();
        }
    }

    public static class TryToExchangeParams extends StaticStruct {
        public String dfaToGive;

        public BigInteger amountToGive;

        public BigInteger amountToGet;

        public BigInteger requestIndex;

        public String buyer;

        public TryToExchangeParams(String dfaToGive, BigInteger amountToGive, BigInteger amountToGet, BigInteger requestIndex, String buyer) {
            super(new org.web3j.abi.datatypes.Address(dfaToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGet),new org.web3j.abi.datatypes.generated.Uint256(requestIndex),new org.web3j.abi.datatypes.Address(buyer));
            this.dfaToGive = dfaToGive;
            this.amountToGive = amountToGive;
            this.amountToGet = amountToGet;
            this.requestIndex = requestIndex;
            this.buyer = buyer;
        }

        public TryToExchangeParams(Address dfaToGive, Uint256 amountToGive, Uint256 amountToGet, Uint256 requestIndex, Address buyer) {
            super(dfaToGive,amountToGive,amountToGet,requestIndex,buyer);
            this.dfaToGive = dfaToGive.getValue();
            this.amountToGive = amountToGive.getValue();
            this.amountToGet = amountToGet.getValue();
            this.requestIndex = requestIndex.getValue();
            this.buyer = buyer.getValue();
        }
    }

    public static class ExchangeCompletedEventResponse extends BaseEventResponse {
        public String firstUser;

        public String firstDfa;

        public BigInteger firstAmount;

        public String secondUser;

        public String secondDfa;

        public BigInteger secondAmount;
    }
}
