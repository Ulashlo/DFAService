package com.hse.dfa.backend.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Exchanger extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b50604051620021853803806200218583398181016040528101906200003791906200019e565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a29062000231565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000253565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001668262000139565b9050919050565b620001788162000159565b81146200018457600080fd5b50565b60008151905062000198816200016d565b92915050565b600060208284031215620001b757620001b662000134565b5b6000620001c78482850162000187565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b600062000219600f83620001d0565b91506200022682620001e1565b602082019050919050565b600060208201905081810360008301526200024c816200020a565b9050919050565b611f2280620002636000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063873deb041161005b578063873deb04146100ea5780638c75d7b414610108578063966dae0e1461013a5780639ecebe2a146101585761007d565b80630c884bde1461008257806354dbc21e146100b25780635f1b9c28146100ce575b600080fd5b61009c60048036038101906100979190611530565b61018a565b6040516100a99190611592565b60405180910390f35b6100cc60048036038101906100c79190611530565b610402565b005b6100e860048036038101906100e391906116b6565b610c3f565b005b6100f261108a565b6040516100ff9190611592565b60405180910390f35b610122600480360381019061011d91906116e3565b6110ae565b6040516101319392919061188c565b60405180910390f35b610142611400565b60405161014f9190611592565b60405180910390f35b610172600480360381019061016d91906118d8565b611426565b60405161018193929190611927565b60405180910390f35b60008282600082116101d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c8906119bb565b60405180910390fd5b60008111610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b906119bb565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027c90611a27565b60405180910390fd5b6000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561038257838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050815260200190600101906102e6565b50505050905060005b81518110156103f15760008282815181106103a9576103a8611a47565b5b602002602001015190508881602001511480156103c95750878160400151145b156103dd57806000015196505050506103f8565b5080806103e990611aa5565b91505061038b565b5060009450505b5050509392505050565b808260008211610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043e906119bb565b60405180910390fd5b6000811161048a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610481906119bb565b60405180910390fd5b84600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f290611a27565b60405180910390fd5b85600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f1d7fa7836040518263ffffffff1660e01b815260040161056f9190611592565b602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611b03565b73ffffffffffffffffffffffffffffffffffffffff161415610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90611b7c565b60405180910390fd5b8460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106639190611592565b602060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190611bb1565b10156106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90611c2a565b60405180910390fd5b818173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610721929190611c4a565b602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190611bb1565b10156107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90611cbf565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f1d7fa78b6040518263ffffffff1660e01b81526004016108009190611592565b602060405180830381865afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108419190611b03565b9050600081905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016108a593929190611cdf565b6020604051808303816000875af11580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611d4e565b5060008173ffffffffffffffffffffffffffffffffffffffff16630c884bde60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8e6040518463ffffffff1660e01b815260040161094893929190611927565b602060405180830381865afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611b03565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b3a5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828c6040518363ffffffff1660e01b8152600401610a1a929190611d7b565b6020604051808303816000875af1158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611d4e565b508173ffffffffffffffffffffffffffffffffffffffff16635f1b9c2860405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018e8152506040518263ffffffff1660e01b8152600401610b039190611df9565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b50505050610c31565b600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550505b505050505050505050505050565b8060400151816060015160008211610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c83906119bb565b60405180910390fd5b60008111610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc6906119bb565b60405180910390fd5b8260200151600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b90611a27565b60405180910390fd5b83602001513373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f1d7fa7836040518263ffffffff1660e01b8152600401610dbb9190611592565b602060405180830381865afa158015610dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfc9190611b03565b73ffffffffffffffffffffffffffffffffffffffff1614610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611e60565b60405180910390fd5b8460000151600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90611a27565b60405180910390fd5b600060026000886020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000805b828054905081101561103f576000838281548110610f3357610f32611a47565b5b9060005260206000209060030201905089604001518160010154148015610f61575089606001518160020154145b1561102b57600081600101819055506000816002018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b600001518c606001516040518363ffffffff1660e01b8152600401610fdd929190611d7b565b6020604051808303816000875af1158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190611d4e565b50600192505061103f565b50808061103790611aa5565b915050610f12565b5080611080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107790611ecc565b60405180910390fd5b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606080606083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111b90611a27565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561122157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505081526020019060010190611185565b5050505090506000815167ffffffffffffffff811115611244576112436115c3565b5b6040519080825280602002602001820160405280156112725781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff811115611292576112916115c3565b5b6040519080825280602002602001820160405280156112c05781602001602082028036833780820191505090505b5090506000835167ffffffffffffffff8111156112e0576112df6115c3565b5b60405190808252806020026020018201604052801561130e5781602001602082028036833780820191505090505b50905060005b84518110156113ea57600085828151811061133257611331611a47565b5b60200260200101519050806000015185838151811061135457611353611a47565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080602001518483815181106113a6576113a5611a47565b5b60200260200101818152505080604001518383815181106113ca576113c9611a47565b5b6020026020010181815250505080806113e290611aa5565b915050611314565b5082828297509750975050505050509193909250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020818154811061144257600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114c78261149c565b9050919050565b6114d7816114bc565b81146114e257600080fd5b50565b6000813590506114f4816114ce565b92915050565b6000819050919050565b61150d816114fa565b811461151857600080fd5b50565b60008135905061152a81611504565b92915050565b60008060006060848603121561154957611548611497565b5b6000611557868287016114e5565b93505060206115688682870161151b565b92505060406115798682870161151b565b9150509250925092565b61158c816114bc565b82525050565b60006020820190506115a76000830184611583565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115fb826115b2565b810181811067ffffffffffffffff8211171561161a576116196115c3565b5b80604052505050565b600061162d61148d565b905061163982826115f2565b919050565b600060808284031215611654576116536115ad565b5b61165e6080611623565b9050600061166e848285016114e5565b6000830152506020611682848285016114e5565b60208301525060406116968482850161151b565b60408301525060606116aa8482850161151b565b60608301525092915050565b6000608082840312156116cc576116cb611497565b5b60006116da8482850161163e565b91505092915050565b6000602082840312156116f9576116f8611497565b5b6000611707848285016114e5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611745816114bc565b82525050565b6000611757838361173c565b60208301905092915050565b6000602082019050919050565b600061177b82611710565b611785818561171b565b93506117908361172c565b8060005b838110156117c15781516117a8888261174b565b97506117b383611763565b925050600181019050611794565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611803816114fa565b82525050565b600061181583836117fa565b60208301905092915050565b6000602082019050919050565b6000611839826117ce565b61184381856117d9565b935061184e836117ea565b8060005b8381101561187f5781516118668882611809565b975061187183611821565b925050600181019050611852565b5085935050505092915050565b600060608201905081810360008301526118a68186611770565b905081810360208301526118ba818561182e565b905081810360408301526118ce818461182e565b9050949350505050565b600080604083850312156118ef576118ee611497565b5b60006118fd858286016114e5565b925050602061190e8582860161151b565b9150509250929050565b611921816114fa565b82525050565b600060608201905061193c6000830186611583565b6119496020830185611918565b6119566040830184611918565b949350505050565b600082825260208201905092915050565b7f4e756d62657220697320657175616c20746f207a65726f000000000000000000600082015250565b60006119a560178361195e565b91506119b08261196f565b602082019050919050565b600060208201905081810360008301526119d481611998565b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000611a11600f8361195e565b9150611a1c826119db565b602082019050919050565b60006020820190508181036000830152611a4081611a04565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ab0826114fa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ae357611ae2611a76565b5b600182019050919050565b600081519050611afd816114ce565b92915050565b600060208284031215611b1957611b18611497565b5b6000611b2784828501611aee565b91505092915050565b7f45786368616e67657220666f7220646661206e6f7420666f756e640000000000600082015250565b6000611b66601b8361195e565b9150611b7182611b30565b602082019050919050565b60006020820190508181036000830152611b9581611b59565b9050919050565b600081519050611bab81611504565b92915050565b600060208284031215611bc757611bc6611497565b5b6000611bd584828501611b9c565b91505092915050565b7f53656e64657220646f6573206e6f74206861766520656e6f7567682064666100600082015250565b6000611c14601f8361195e565b9150611c1f82611bde565b602082019050919050565b60006020820190508181036000830152611c4381611c07565b9050919050565b6000604082019050611c5f6000830185611583565b611c6c6020830184611583565b9392505050565b7f416d6f756e74206f6620444641206973206e6f7420616c6c6f77656400000000600082015250565b6000611ca9601c8361195e565b9150611cb482611c73565b602082019050919050565b60006020820190508181036000830152611cd881611c9c565b9050919050565b6000606082019050611cf46000830186611583565b611d016020830185611583565b611d0e6040830184611918565b949350505050565b60008115159050919050565b611d2b81611d16565b8114611d3657600080fd5b50565b600081519050611d4881611d22565b92915050565b600060208284031215611d6457611d63611497565b5b6000611d7284828501611d39565b91505092915050565b6000604082019050611d906000830185611583565b611d9d6020830184611918565b9392505050565b608082016000820151611dba600085018261173c565b506020820151611dcd602085018261173c565b506040820151611de060408501826117fa565b506060820151611df360608501826117fa565b50505050565b6000608082019050611e0e6000830184611da4565b92915050565b7f53656e646572206973206e6f742065786368616e676572000000000000000000600082015250565b6000611e4a60178361195e565b9150611e5582611e14565b602082019050919050565b60006020820190508181036000830152611e7981611e3d565b9050919050565b7f56616c69642072657175657374206e6f7420666f756e64000000000000000000600082015250565b6000611eb660178361195e565b9150611ec182611e80565b602082019050919050565b60006020820190508181036000830152611ee581611ea9565b905091905056fea264697066735822122068e5799b9954f72333dd2c7a8c6f985cce9d4f5c4c4a5d602c0ceb7a7a6d2ff564736f6c634300080b0033";

    public static final String FUNC_DFAADDRESS = "dfaAddress";

    public static final String FUNC_FACTORYADDRESS = "factoryAddress";

    public static final String FUNC_REQUESTS = "requests";

    public static final String FUNC_GETCORRECTREQUESTUSER = "getCorrectRequestUser";

    public static final String FUNC_ADDREQUEST = "addRequest";

    public static final String FUNC_TRYTOEXCHANGE = "tryToExchange";

    public static final String FUNC_GETREQUESTSBYDFA = "getRequestsByDfa";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xae8F718CC3A233f8025979eB5143A55aDc45Adc0");
    }

    @Deprecated
    protected Exchanger(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchanger(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchanger(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchanger(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> dfaAddress() {
        final Function function = new Function(FUNC_DFAADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> factoryAddress() {
        final Function function = new Function(FUNC_FACTORYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> requests(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_REQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getCorrectRequestUser(String dfaToGive, BigInteger amountToGive, BigInteger amountToGet) {
        final Function function = new Function(FUNC_GETCORRECTREQUESTUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaToGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountToGive), 
                new org.web3j.abi.datatypes.generated.Uint256(amountToGet)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addRequest(String dfaToGet, BigInteger amountToGet, BigInteger amountToGive) {
        final Function function = new Function(
                FUNC_ADDREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaToGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountToGet), 
                new org.web3j.abi.datatypes.generated.Uint256(amountToGive)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> tryToExchange(InnerExchangerRequestInfo info) {
        final Function function = new Function(
                FUNC_TRYTOEXCHANGE, 
                Arrays.<Type>asList(info), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>> getRequestsByDfa(String dfa) {
        final Function function = new Function(FUNC_GETREQUESTSBYDFA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfa)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple3<List<String>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<String>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    @Deprecated
    public static Exchanger load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchanger(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchanger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchanger(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchanger load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchanger(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchanger load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchanger(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchanger> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Exchanger> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Exchanger> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Exchanger> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String dfaAddressToLink) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddressToLink)));
        return deployRemoteCall(Exchanger.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class InnerExchangerRequestInfo extends StaticStruct {
        public String user;

        public String dfaToGive;

        public BigInteger amountToGive;

        public BigInteger amountToGet;

        public InnerExchangerRequestInfo(String user, String dfaToGive, BigInteger amountToGive, BigInteger amountToGet) {
            super(new org.web3j.abi.datatypes.Address(user),new org.web3j.abi.datatypes.Address(dfaToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGive),new org.web3j.abi.datatypes.generated.Uint256(amountToGet));
            this.user = user;
            this.dfaToGive = dfaToGive;
            this.amountToGive = amountToGive;
            this.amountToGet = amountToGet;
        }

        public InnerExchangerRequestInfo(Address user, Address dfaToGive, Uint256 amountToGive, Uint256 amountToGet) {
            super(user,dfaToGive,amountToGive,amountToGet);
            this.user = user.getValue();
            this.dfaToGive = dfaToGive.getValue();
            this.amountToGive = amountToGive.getValue();
            this.amountToGet = amountToGet.getValue();
        }
    }
}
