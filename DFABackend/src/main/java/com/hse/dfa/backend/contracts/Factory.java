package com.hse.dfa.backend.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Factory extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055613fdb806100326000396000f3fe60806040523480156200001157600080fd5b5060043610620000695760003560e01c8062113e08146200006e57806310c1ca2b14620000915780632f1d7fa714620000b75780634d81312014620000ce5780635d07a60414620000e7578063b5f3ef5d1462000104575b600080fd5b620000786200011d565b6040516200008892919062000b66565b60405180910390f35b620000a8620000a236600462000c67565b620002db565b60405162000088919062000cda565b620000a8620000c836600462000d07565b62000466565b620000e5620000df36600462000d07565b620004b2565b005b620000f1620005f3565b6040516200008895949392919062000de8565b6200010e62000a6e565b60405162000088919062000e5f565b60608060006001805490506001600160401b0381111562000142576200014262000b98565b6040519080825280602002602001820160405280156200016c578160200160208202803683370190505b506001549091506000906001600160401b0381111562000190576200019062000b98565b604051908082528060200260200182016040528015620001ba578160200160208202803683370190505b50905060005b600154811015620002d157600060018281548110620001e357620001e362000e74565b60009182526020909120015484516001600160a01b0390911691508190819086908590811062000217576200021762000e74565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908216906370a08231906200025490339060040162000cda565b602060405180830381865afa15801562000272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000298919062000e8a565b848481518110620002ad57620002ad62000e74565b60200260200101818152505050508080620002c89062000ea4565b915050620001c0565b5090939092509050565b3360009081526003602052604081205460ff16620003345760405162461bcd60e51b8152602060048201526011602482015270155cd95c881b9bdd081d995c9a599a5959607a1b60448201526064015b60405180910390fd5b600084848433604051620003489062000ad2565b62000357949392919062000ece565b604051809103906000f08015801562000374573d6000803e3d6000fd5b509050600081604051620003889062000ae0565b62000394919062000cda565b604051809103906000f080158015620003b1573d6000803e3d6000fd5b506001600160a01b0380841660008181526002602052604080822080549486166001600160a01b031995861617905560018054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018054909316909117909155519091507fdfae1556cb7f36a9d52c930e2986c55fcdef66c402f38194f645b04a15a196da90620004559033908590899089908c9062000f17565b60405180910390a150949350505050565b6000816001600160a01b038116620004925760405162461bcd60e51b81526004016200032b9062000f6c565b50506001600160a01b039081166000908152600260205260409020541690565b806001600160a01b038116620004dc5760405162461bcd60e51b81526004016200032b9062000f6c565b6001600160a01b038216600090815260036020526040902054829060ff1615620005415760405162461bcd60e51b8152602060048201526015602482015274155cd95c88185b1c9958591e481d995c9a599a5959605a1b60448201526064016200032b565b6000546001600160a01b03163314620005915760405162461bcd60e51b81526020600482015260116024820152702ab9b2b91034b9903737ba1037bbb732b960791b60448201526064016200032b565b6001600160a01b03831660009081526003602052604090819020805460ff19166001179055517fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a90620005e690859062000cda565b60405180910390a1505050565b606080606080606060006001805490506001600160401b038111156200061d576200061d62000b98565b60405190808252806020026020018201604052801562000647578160200160208202803683370190505b506001549091506000906001600160401b038111156200066b576200066b62000b98565b60405190808252806020026020018201604052801562000695578160200160208202803683370190505b506001549091506000906001600160401b03811115620006b957620006b962000b98565b604051908082528060200260200182016040528015620006ee57816020015b6060815260200190600190039081620006d85790505b506001549091506000906001600160401b0381111562000712576200071262000b98565b6040519080825280602002602001820160405280156200074757816020015b6060815260200190600190039081620007315790505b506001549091506000906001600160401b038111156200076b576200076b62000b98565b60405190808252806020026020018201604052801562000795578160200160208202803683370190505b50905060005b60015481101562000a5c57600060018281548110620007be57620007be62000e74565b60009182526020909120015487516001600160a01b03909116915081908190899085908110620007f257620007f262000e74565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000851573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000877919062000f9b565b8784815181106200088c576200088c62000e74565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620008eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000915919081019062000fbb565b8684815181106200092a576200092a62000e74565b6020026020010181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000974573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200099e919081019062000fbb565b858481518110620009b357620009b362000e74565b6020026020010181905250806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620009fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a23919062000e8a565b84848151811062000a385762000a3862000e74565b6020026020010181815250505050808062000a539062000ea4565b9150506200079b565b50939992985090965094509092509050565b6060600180548060200260200160405190810160405280929190818152602001828054801562000ac857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000aa9575b5050505050905090565b610ebb806200103283390190565b6120b98062001eed83390190565b600081518084526020808501945080840160005b8381101562000b295781516001600160a01b03168752958201959082019060010162000b02565b509495945050505050565b600081518084526020808501945080840160005b8381101562000b295781518752958201959082019060010162000b48565b60408152600062000b7b604083018562000aee565b828103602084015262000b8f818562000b34565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000bd95762000bd962000b98565b604052919050565b60006001600160401b0382111562000bfd5762000bfd62000b98565b50601f01601f191660200190565b600082601f83011262000c1d57600080fd5b813562000c3462000c2e8262000be1565b62000bae565b81815284602083860101111562000c4a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121562000c7d57600080fd5b8335925060208401356001600160401b038082111562000c9c57600080fd5b62000caa8783880162000c0b565b9350604086013591508082111562000cc157600080fd5b5062000cd08682870162000c0b565b9150509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b038116811462000d0457600080fd5b50565b60006020828403121562000d1a57600080fd5b813562000d278162000cee565b9392505050565b60005b8381101562000d4b57818101518382015260200162000d31565b8381111562000d5b576000848401525b50505050565b6000815180845262000d7b81602086016020860162000d2e565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101562000ddb57828403895262000dc884835162000d61565b9885019893509084019060010162000dad565b5091979650505050505050565b60a08152600062000dfd60a083018862000aee565b828103602084015262000e11818862000aee565b9050828103604084015262000e27818762000d8f565b9050828103606084015262000e3d818662000d8f565b9050828103608084015262000e53818562000b34565b98975050505050505050565b60208152600062000d27602083018462000aee565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000e9d57600080fd5b5051919050565b600060001982141562000ec757634e487b7160e01b600052601160045260246000fd5b5060010190565b84815260806020820152600062000ee9608083018662000d61565b828103604084015262000efd818662000d61565b91505060018060a01b038316606083015295945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009062000f459083018662000d61565b828103606084015262000f59818662000d61565b9150508260808301529695505050505050565b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b60006020828403121562000fae57600080fd5b815162000d278162000cee565b60006020828403121562000fce57600080fd5b81516001600160401b0381111562000fe557600080fd5b8201601f8101841362000ff757600080fd5b80516200100862000c2e8262000be1565b8181528560208385010111156200101e57600080fd5b62000b8f82602083016020860162000d2e56fe60806040523480156200001157600080fd5b5060405162000ebb38038062000ebb833981016040819052620000349162000353565b8251839083906200004d906003906020850190620001e0565b50805162000063906004906020840190620001e0565b50829150506001600160a01b038116620000c45760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064015b60405180910390fd5b620000d08286620000fb565b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200044d915050565b6001600160a01b038216620001535760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000bb565b8060026000828254620001679190620003e9565b90915550506001600160a01b0382166000908152602081905260408120805483929062000196908490620003e9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001ee9062000410565b90600052602060002090601f0160209004810192826200021257600085556200025d565b82601f106200022d57805160ff19168380011785556200025d565b828001600101855582156200025d579182015b828111156200025d57825182559160200191906001019062000240565b506200026b9291506200026f565b5090565b5b808211156200026b576000815560010162000270565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002ae57600080fd5b81516001600160401b0380821115620002cb57620002cb62000286565b604051601f8301601f19908116603f01168101908282118183101715620002f657620002f662000286565b816040528381526020925086838588010111156200031357600080fd5b600091505b8382101562000337578582018301518183018401529082019062000318565b83821115620003495760008385830101525b9695505050505050565b600080600080608085870312156200036a57600080fd5b845160208601519094506001600160401b03808211156200038a57600080fd5b62000398888389016200029c565b94506040870151915080821115620003af57600080fd5b50620003be878288016200029c565b606087015190935090506001600160a01b0381168114620003de57600080fd5b939692955090935050565b600082198211156200040b57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200042557607f821691505b602082108114156200044757634e487b7160e01b600052602260045260246000fd5b50919050565b610a5e806200045d6000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806306fdde03146100b4578063095ea7b3146100d257806318160ddd146100f557806323b872dd14610107578063313ce5671461011a578063395093511461012957806370a082311461013c5780638da5cb5b1461016557806395d89b4114610190578063a0712d6814610198578063a457c2d7146101ad578063a9059cbb146101c0578063dd62ed3e146101d3575b600080fd5b6100bc6101e6565b6040516100c99190610862565b60405180910390f35b6100e56100e03660046108d3565b610278565b60405190151581526020016100c9565b6002545b6040519081526020016100c9565b6100e56101153660046108fd565b610290565b604051600081526020016100c9565b6100e56101373660046108d3565b6102b4565b6100f961014a366004610939565b6001600160a01b031660009081526020819052604090205490565b600554610178906001600160a01b031681565b6040516001600160a01b0390911681526020016100c9565b6100bc6102f3565b6101ab6101a636600461095b565b610302565b005b6100e56101bb3660046108d3565b610370565b6100e56101ce3660046108d3565b610402565b6100f96101e1366004610974565b610410565b6060600380546101f5906109a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906109a7565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b60003361028681858561043b565b5060019392505050565b60003361029e85828561055f565b6102a98585856105d9565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102ee9087906109e2565b61043b565b6060600480546101f5906109a7565b6005546001600160a01b031633146103575760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b60448201526064015b60405180910390fd5b60055461036d906001600160a01b031682610795565b50565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103f55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034e565b6102a9828686840361043b565b6000336102868185856105d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661049d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034e565b6001600160a01b0382166104fe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061056b8484610410565b905060001981146105d357818110156105c65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161034e565b6105d3848484840361043b565b50505050565b6001600160a01b03831661063d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034e565b6001600160a01b03821661069f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034e565b6001600160a01b038316600090815260208190526040902054818110156107175760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034e565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061074e9084906109e2565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610a098339815191528460405161078891815260200190565b60405180910390a36105d3565b6001600160a01b0382166107eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161034e565b80600260008282546107fd91906109e2565b90915550506001600160a01b0382166000908152602081905260408120805483929061082a9084906109e2565b90915550506040518181526001600160a01b03831690600090600080516020610a098339815191529060200160405180910390a35050565b600060208083528351808285015260005b8181101561088f57858101830151858201604001528201610873565b818111156108a1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108ce57600080fd5b919050565b600080604083850312156108e657600080fd5b6108ef836108b7565b946020939093013593505050565b60008060006060848603121561091257600080fd5b61091b846108b7565b9250610929602085016108b7565b9150604084013590509250925092565b60006020828403121561094b57600080fd5b610954826108b7565b9392505050565b60006020828403121561096d57600080fd5b5035919050565b6000806040838503121561098757600080fd5b610990836108b7565b915061099e602084016108b7565b90509250929050565b600181811c908216806109bb57607f821691505b602082108114156109dc57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610a0357634e487b7160e01b600052601160045260246000fd5b50019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122094c987657665c238adb58c41cea1cb48ac72fdf6fdc212543d393d6fb0553fa264736f6c634300080b0033608060405234801561001057600080fd5b50604051620020b9380380620020b9833981016040819052610031916100ad565b806001600160a01b03811661007e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640160405180910390fd5b50600080546001600160a01b039092166001600160a01b031992831617905560018054909116331790556100dd565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b611fcc80620000ed6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80636bef7a2b14610072578063873deb04146100875780638c75d7b4146100b0578063966dae0e146100d25780639ecebe2a146100e5578063c31f27101461010a578063d550a5d41461011d575b600080fd5b610085610080366004611a53565b610178565b005b60005461009a906001600160a01b031681565b6040516100a79190611ab5565b60405180910390f35b6100c36100be366004611ac9565b610d66565b6040516100a793929190611b21565b60015461009a906001600160a01b031681565b6100f86100f3366004611b96565b61112a565b6040516100a796959493929190611bf6565b610085610118366004611c44565b61118f565b61013061012b366004611ca5565b6114b8565b6040516100a791908151151581526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b80606001518160400151600082116101ab5760405162461bcd60e51b81526004016101a290611d3a565b60405180910390fd5b600081116101cb5760405162461bcd60e51b81526004016101a290611d3a565b60208301516001600160a01b0381166101f65760405162461bcd60e51b81526004016101a290611d6b565b6020840151600154604051632f1d7fa760e01b81526000916001600160a01b031690632f1d7fa79061022c908590600401611ab5565b602060405180830381865afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d9190611d94565b6001600160a01b031614156102c25760405162461bcd60e51b815260206004820152601b60248201527a115e18da185b99d95c88199bdc88191998481b9bdd08199bdd5b99602a1b60448201526064016101a2565b60608501516000546040516370a0823160e01b815282916001600160a01b0316906370a08231906102f7903390600401611ab5565b602060405180830381865afa158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190611db1565b10156103865760405162461bcd60e51b815260206004820152601f60248201527f53656e64657220646f6573206e6f74206861766520656e6f756768206466610060448201526064016101a2565b600054604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190611db1565b10156104455760405162461bcd60e51b815260206004820152601c60248201527b105b5bdd5b9d081bd988111190481a5cc81b9bdd08185b1b1bddd95960221b60448201526064016101a2565b6001546020870151604051632f1d7fa760e01b81526000926001600160a01b031691632f1d7fa79161047a9190600401611ab5565b602060405180830381865afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190611d94565b60005460608901516040516323b872dd60e01b8152336004820152306024820152604481019190915291925082916001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190611dda565b506000816001600160a01b031663d550a5d460405180608001604052808c60000151600181111561057457610574611bc2565b8152600080546001600160a01b031660208301526060808f01516040808501919091528f810151919093015290516001600160e01b031960e085901b1681526105c1929190600401611e2a565b60a060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190611e45565b905060008951600181111561061957610619611bc2565b14156108775780511561074757600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92610660929091600401611ea7565b6020604051808303816000875af115801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190611dda565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f27109161070191600401611ec0565b600060405180830381600087803b15801561071b57600080fd5b505af115801561072f573d6000803e3d6000fd5b5050600060608c0181905260408c015250610d5b9050565b600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b60000151600181111561079157610791611bc2565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff199091169083818111156107f9576107f9611bc2565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff191690838181111561086b5761086b611bc2565b02179055505050610d5b565b80518015610889575060008960600151115b8015610899575060008960400151115b15610c125788606001518160600151111580156108be57508860400151816080015111155b15610a0b576000546020820151606083015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb926108fd929091600401611ea7565b6020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190611dda565b506040805160a0810182526000546001600160a01b039081168252606080850151602084015260808086015184860152858501519184019190915233908301529151630c31f27160e41b81529184169163c31f2710916109a291600401611ec0565b600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b505050508060600151896060018181516109ea9190611f17565b905250608081015160408a018051610a03908390611f17565b905250610b27565b600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92610a45929091600401611ea7565b6020604051808303816000875af1158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a889190611dda565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f271091610ae691600401611ec0565b600060405180830381600087803b158015610b0057600080fd5b505af1158015610b14573d6000803e3d6000fd5b5050600060608c0181905260408c015250505b60608901511580610b3a57506040890151155b15610b4457610c12565b816001600160a01b031663d550a5d460405180608001604052808c600001516001811115610b7457610b74611bc2565b81526000546001600160a01b031660208201526060808e01516040808401919091528e8101519190920152840151610bad906001611f2e565b6040518363ffffffff1660e01b8152600401610bca929190611e2a565b60a060405180830381865afa158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190611e45565b9050610877565b60008960400151118015610c2a575060008960600151115b15610d5b57600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b600001516001811115610c7957610c79611bc2565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff19909116908381811115610ce157610ce1611bc2565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff1916908381811115610d5357610d53611bc2565b021790555050505b505050505050505050565b60608080836001600160a01b038116610d915760405162461bcd60e51b81526004016101a290611d6b565b6001600160a01b038516600090815260026020908152604080832080548251818502810185019093528083529192909190849084015b82821015610e8b576000848152602090206040805160c08101909152600584029091018054829060ff166001811115610e0257610e02611bc2565b6001811115610e1357610e13611bc2565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115610e6757610e67611bc2565b6001811115610e7857610e78611bc2565b8152505081526020019060010190610dc7565b5050505090506000805b8251811015610f1e576000838281518110610eb257610eb2611f46565b602002602001015160a001516001811115610ecf57610ecf611bc2565b148015610ef9575042838281518110610eea57610eea611f46565b60200260200101516080015110155b15610f0c5781610f0881611f5c565b9250505b80610f1681611f5c565b915050610e95565b506000816001600160401b03811115610f3957610f396119db565b604051908082528060200260200182016040528015610f62578160200160208202803683370190505b5090506000826001600160401b03811115610f7f57610f7f6119db565b604051908082528060200260200182016040528015610fa8578160200160208202803683370190505b5090506000836001600160401b03811115610fc557610fc56119db565b604051908082528060200260200182016040528015610fee578160200160208202803683370190505b5090506000805b865181101561111957600087828151811061101257611012611f46565b602002602001015160a00151600181111561102f5761102f611bc2565b14801561105957504287828151811061104a5761104a611f46565b60200260200101516080015110155b1561110757600087828151811061107257611072611f46565b60200260200101519050806020015186848151811061109357611093611f46565b60200260200101906001600160a01b031690816001600160a01b03168152505080604001518584815181106110ca576110ca611f46565b60200260200101818152505080606001518484815181106110ed576110ed611f46565b6020908102919091010152611103600184611f2e565b9250505b8061111181611f5c565b915050610ff5565b50929a919950975095505050505050565b6002602052816000526040600020818154811061114657600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff80851697506101009094046001600160a01b031695509193909290911686565b80602001518160400151600082116111b95760405162461bcd60e51b81526004016101a290611d3a565b600081116111d95760405162461bcd60e51b81526004016101a290611d3a565b82516001600160a01b0381166112015760405162461bcd60e51b81526004016101a290611d6b565b8351600154604051632f1d7fa760e01b815233916001600160a01b031690632f1d7fa790611233908590600401611ab5565b602060405180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112749190611d94565b6001600160a01b0316146112c45760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91034b9903737ba1032bc31b430b733b2b960491b60448201526064016101a2565b60808501516001600160a01b0381166112ef5760405162461bcd60e51b81526004016101a290611d6b565b85516001600160a01b0316600090815260026020526040812060608801518154811061131d5761131d611f46565b9060005260206000209060050201905086602001518160010160008282546113459190611f17565b90915550506040870151600282018054600090611363908490611f17565b9091555060009050815460ff16600181111561138157611381611bc2565b148061138f57506001810154155b8061139c57506002810154155b156113b15760048101805460ff191660011790555b60005460808801516040808a0151905163a9059cbb60e01b81526001600160a01b039093169263a9059cbb926113eb929091600401611ea7565b6020604051808303816000875af115801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190611dda565b508054600054600283015460808a8101518b516020808e0151604080516001600160a01b03610100909a048a16815297891692880192909252868201959095529186166060860152949094169083015260a082015290517f3fcd82abd7b4aa2dae161019e066c1909e297f3a20b3b4757ef4aa36b1a122429181900360c00190a150505050505050565b6114f56040518060a0016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b826040015183606001516000821161151f5760405162461bcd60e51b81526004016101a290611d3a565b6000811161153f5760405162461bcd60e51b81526004016101a290611d3a565b60208501516001600160a01b03811661156a5760405162461bcd60e51b81526004016101a290611d6b565b6020808701516001600160a01b031660009081526002825260408082208054825181860281018601909352808352929391929091849084015b82821015611667576000848152602090206040805160c08101909152600584029091018054829060ff1660018111156115de576115de611bc2565b60018111156115ef576115ef611bc2565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff169081111561164357611643611bc2565b600181111561165457611654611bc2565b81525050815260200190600101906115a3565b5092935088925050505b81518110156118fd57600082828151811061168e5761168e611f46565b602002602001015190506001808111156116aa576116aa611bc2565b8160a0015160018111156116c0576116c0611bc2565b14806116cf5750428160800151105b156116da57506118eb565b600080825160018111156116f0576116f0611bc2565b14801561170f575060008a51600181111561170d5761170d611bc2565b145b1561175d5761175660405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611942565b9050611898565b60008251600181111561177257611772611bc2565b148015611791575060018a51600181111561178f5761178f611bc2565b145b156117d85761175660405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611964565b6001825160018111156117ed576117ed611bc2565b14801561180c575060008a51600181111561180a5761180a611bc2565b145b1561185357611756604051806040016040528084604001518152602001846060015181525060405180604001604052808d6060015181526020018d60400151815250611964565b61189560405180604001604052808c6060015181526020018c6040015181525060405180604001604052808560400151815260200185606001518152506119af565b90505b80156118e8576040518060a0016040528060011515815260200183602001516001600160a01b03168152602001848152602001836040015181526020018360600151815250975050505050611939565b50505b806118f581611f5c565b915050611671565b506040518060a0016040528060001515815260200160006001600160a01b03168152602001600081526020016000815260200160008152509450505b50505092915050565b6020810151825160009114801561195d575060208301518251145b9392505050565b8051825160009161197491611f77565b826020015184602001516119889190611f77565b14801561199a57506020820151835110155b801561195d5750505160209190910151101590565b805182516000916119bf91611f77565b826020015184602001516119d39190611f77565b149392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715611a2157634e487b7160e01b600052604160045260246000fd5b60405290565b803560028110611a3657600080fd5b919050565b6001600160a01b0381168114611a5057600080fd5b50565b600060a08284031215611a6557600080fd5b611a6d6119f1565b611a7683611a27565b81526020830135611a8681611a3b565b806020830152506040830135604082015260608301356060820152608083013560808201528091505092915050565b6001600160a01b0391909116815260200190565b600060208284031215611adb57600080fd5b813561195d81611a3b565b600081518084526020808501945080840160005b83811015611b1657815187529582019590820190600101611afa565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b82811015611b635781516001600160a01b031684529284019290840190600101611b3e565b50505083810382850152611b778187611ae6565b9150508281036040840152611b8c8185611ae6565b9695505050505050565b60008060408385031215611ba957600080fd5b8235611bb481611a3b565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60028110611a5057634e487b7160e01b600052602160045260246000fd5b60c08101611c0388611bd8565b8782526001600160a01b0387166020830152604082018690526060820185905260808201849052611c3383611bd8565b8260a0830152979650505050505050565b600060a08284031215611c5657600080fd5b611c5e6119f1565b8235611c6981611a3b565b808252506020830135602082015260408301356040820152606083013560608201526080830135611c9981611a3b565b60808201529392505050565b60008082840360a0811215611cb957600080fd5b6080811215611cc757600080fd5b50604051608081016001600160401b0381118282101715611cf857634e487b7160e01b600052604160045260246000fd5b604052611d0484611a27565b81526020840135611d1481611a3b565b602082015260408481013590820152606080850135908201529460809093013593505050565b6020808252601790820152764e756d62657220697320657175616c20746f207a65726f60481b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b600060208284031215611da657600080fd5b815161195d81611a3b565b600060208284031215611dc357600080fd5b5051919050565b80518015158114611a3657600080fd5b600060208284031215611dec57600080fd5b61195d82611dca565b8051611e0081611bd8565b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b60a08101611e388285611df5565b8260808301529392505050565b600060a08284031215611e5757600080fd5b611e5f6119f1565b611e6883611dca565b81526020830151611e7881611a3b565b806020830152506040830151604082015260608301516060820152608083015160808201528091505092915050565b6001600160a01b03929092168252602082015260400190565b81516001600160a01b039081168252602080840151908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f2957611f29611f01565b500390565b60008219821115611f4157611f41611f01565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611f7057611f70611f01565b5060010190565b6000816000190483118215151615611f9157611f91611f01565b50029056fea26469706673582212200ed80e4942d038d88eb879702043c7b8a16d87c496d87e42ec0f9ccf77285bc764736f6c634300080b0033a2646970667358221220bc65e40799411333f1bf75ead171252a4c2454eb0ecd0d326f83217cb71c018364736f6c634300080b0033";

    public static final String FUNC_CREATEDFA = "createDfa";

    public static final String FUNC_VERIFYUSER = "verifyUser";

    public static final String FUNC_GETEXCHANGER = "getExchanger";

    public static final String FUNC_GETALLDFA = "getAllDfa";

    public static final String FUNC_GETALLDFAADDRESSES = "getAllDfaAddresses";

    public static final String FUNC_GETBALANCES = "getBalances";

    public static final Event DFACREATED_EVENT = new Event("DFACreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERVERIFIED_EVENT = new Event("UserVerified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Factory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Factory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Factory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Factory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DFACreatedEventResponse> getDFACreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DFACREATED_EVENT, transactionReceipt);
        ArrayList<DFACreatedEventResponse> responses = new ArrayList<DFACreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DFACreatedEventResponse typedResponse = new DFACreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.whoCreate = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dfaAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.initialSupply = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DFACreatedEventResponse> dFACreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DFACreatedEventResponse>() {
            @Override
            public DFACreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DFACREATED_EVENT, log);
                DFACreatedEventResponse typedResponse = new DFACreatedEventResponse();
                typedResponse.log = log;
                typedResponse.whoCreate = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dfaAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.initialSupply = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DFACreatedEventResponse> dFACreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DFACREATED_EVENT));
        return dFACreatedEventFlowable(filter);
    }

    public List<UserVerifiedEventResponse> getUserVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERVERIFIED_EVENT, transactionReceipt);
        ArrayList<UserVerifiedEventResponse> responses = new ArrayList<UserVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserVerifiedEventResponse typedResponse = new UserVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserVerifiedEventResponse> userVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UserVerifiedEventResponse>() {
            @Override
            public UserVerifiedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERVERIFIED_EVENT, log);
                UserVerifiedEventResponse typedResponse = new UserVerifiedEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UserVerifiedEventResponse> userVerifiedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERVERIFIED_EVENT));
        return userVerifiedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createDfa(BigInteger initialSupply, String name, String symbol) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEDFA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialSupply), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyUser(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFYUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getExchanger(String dfaAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEXCHANGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>> getAllDfa() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLDFA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Address>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<List> getAllDfaAddresses() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLDFAADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>> getBalances() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBALANCES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    @Deprecated
    public static Factory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Factory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Factory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Factory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Factory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Factory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Factory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Factory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Factory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Factory.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Factory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Factory.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Factory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Factory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Factory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Factory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DFACreatedEventResponse extends BaseEventResponse {
        public String whoCreate;

        public String dfaAddress;

        public String name;

        public String symbol;

        public BigInteger initialSupply;
    }

    public static class UserVerifiedEventResponse extends BaseEventResponse {
        public String user;
    }
}
