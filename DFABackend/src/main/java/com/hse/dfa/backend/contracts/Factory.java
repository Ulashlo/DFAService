package com.hse.dfa.backend.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Factory extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556143e5806100326000396000f3fe60806040523480156200001157600080fd5b5060043610620000755760003560e01c8062113e08146200007a57806310c1ca2b146200009d5780632f1d7fa714620000c3578063395d47b014620000da5780634d81312014620000e65780635d07a60414620000fd578063b5f3ef5d146200011a575b600080fd5b6200008462000133565b6040516200009492919062000c51565b60405180910390f35b620000b4620000ae36600462000d52565b620002f1565b60405162000094919062000dc5565b620000b4620000d436600462000def565b6200047c565b620000e4620004c8565b005b620000e4620000f736600462000def565b620005c0565b62000107620006de565b6040516200009495949392919062000ed0565b6200012462000b59565b60405162000094919062000f47565b60608060006001805490506001600160401b0381111562000158576200015862000c83565b60405190808252806020026020018201604052801562000182578160200160208202803683370190505b506001549091506000906001600160401b03811115620001a657620001a662000c83565b604051908082528060200260200182016040528015620001d0578160200160208202803683370190505b50905060005b600154811015620002e757600060018281548110620001f957620001f962000f5c565b60009182526020909120015484516001600160a01b039091169150819081908690859081106200022d576200022d62000f5c565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908216906370a08231906200026a90339060040162000dc5565b602060405180830381865afa15801562000288573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ae919062000f72565b848481518110620002c357620002c362000f5c565b60200260200101818152505050508080620002de9062000f8c565b915050620001d6565b5090939092509050565b3360009081526003602052604081205460ff166200034a5760405162461bcd60e51b8152602060048201526011602482015270155cd95c881b9bdd081d995c9a599a5959607a1b60448201526064015b60405180910390fd5b6000848484336040516200035e9062000bbd565b6200036d949392919062000fb6565b604051809103906000f0801580156200038a573d6000803e3d6000fd5b5090506000816040516200039e9062000bcb565b620003aa919062000dc5565b604051809103906000f080158015620003c7573d6000803e3d6000fd5b506001600160a01b0380841660008181526002602052604080822080549486166001600160a01b031995861617905560018054808201825592527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018054909316909117909155519091507fdfae1556cb7f36a9d52c930e2986c55fcdef66c402f38194f645b04a15a196da906200046b9033908590899089908c9062000fff565b60405180910390a150949350505050565b6000816001600160a01b038116620004a85760405162461bcd60e51b8152600401620003419062001054565b50506001600160a01b039081166000908152600260205260409020541690565b6000546001600160a01b03163314620004f55760405162461bcd60e51b8152600401620003419062001083565b60005b600154811015620005bd57600060026000600184815481106200051f576200051f62000f5c565b60009182526020808320909101546001600160a01b039081168452908301939093526040918201902054905163704eb61b60e11b815291169150819063e09d6c36906200057290600190600401620010ae565b600060405180830381600087803b1580156200058d57600080fd5b505af1158015620005a2573d6000803e3d6000fd5b50505050508080620005b49062000f8c565b915050620004f8565b50565b806001600160a01b038116620005ea5760405162461bcd60e51b8152600401620003419062001054565b6001600160a01b038216600090815260036020526040902054829060ff16156200064f5760405162461bcd60e51b8152602060048201526015602482015274155cd95c88185b1c9958591e481d995c9a599a5959605a1b604482015260640162000341565b6000546001600160a01b031633146200067c5760405162461bcd60e51b8152600401620003419062001083565b6001600160a01b03831660009081526003602052604090819020805460ff19166001179055517fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a90620006d190859062000dc5565b60405180910390a1505050565b606080606080606060006001805490506001600160401b0381111562000708576200070862000c83565b60405190808252806020026020018201604052801562000732578160200160208202803683370190505b506001549091506000906001600160401b0381111562000756576200075662000c83565b60405190808252806020026020018201604052801562000780578160200160208202803683370190505b506001549091506000906001600160401b03811115620007a457620007a462000c83565b604051908082528060200260200182016040528015620007d957816020015b6060815260200190600190039081620007c35790505b506001549091506000906001600160401b03811115620007fd57620007fd62000c83565b6040519080825280602002602001820160405280156200083257816020015b60608152602001906001900390816200081c5790505b506001549091506000906001600160401b0381111562000856576200085662000c83565b60405190808252806020026020018201604052801562000880578160200160208202803683370190505b50905060005b60015481101562000b4757600060018281548110620008a957620008a962000f5c565b60009182526020909120015487516001600160a01b03909116915081908190899085908110620008dd57620008dd62000f5c565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000962919062001100565b87848151811062000977576200097762000f5c565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620009d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a00919081019062001120565b86848151811062000a155762000a1562000f5c565b6020026020010181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000a5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a89919081019062001120565b85848151811062000a9e5762000a9e62000f5c565b6020026020010181905250806001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ae8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0e919062000f72565b84848151811062000b235762000b2362000f5c565b6020026020010181815250505050808062000b3e9062000f8c565b91505062000886565b50939992985090965094509092509050565b6060600180548060200260200160405190810160405280929190818152602001828054801562000bb357602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000b94575b5050505050905090565b610ebb806200119783390190565b61235e806200205283390190565b600081518084526020808501945080840160005b8381101562000c145781516001600160a01b03168752958201959082019060010162000bed565b509495945050505050565b600081518084526020808501945080840160005b8381101562000c145781518752958201959082019060010162000c33565b60408152600062000c66604083018562000bd9565b828103602084015262000c7a818562000c1f565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000cc45762000cc462000c83565b604052919050565b60006001600160401b0382111562000ce85762000ce862000c83565b50601f01601f191660200190565b600082601f83011262000d0857600080fd5b813562000d1f62000d198262000ccc565b62000c99565b81815284602083860101111562000d3557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121562000d6857600080fd5b8335925060208401356001600160401b038082111562000d8757600080fd5b62000d958783880162000cf6565b9350604086013591508082111562000dac57600080fd5b5062000dbb8682870162000cf6565b9150509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114620005bd57600080fd5b60006020828403121562000e0257600080fd5b813562000e0f8162000dd9565b9392505050565b60005b8381101562000e3357818101518382015260200162000e19565b8381111562000e43576000848401525b50505050565b6000815180845262000e6381602086016020860162000e16565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101562000ec357828403895262000eb084835162000e49565b9885019893509084019060010162000e95565b5091979650505050505050565b60a08152600062000ee560a083018862000bd9565b828103602084015262000ef9818862000bd9565b9050828103604084015262000f0f818762000e77565b9050828103606084015262000f25818662000e77565b9050828103608084015262000f3b818562000c1f565b98975050505050505050565b60208152600062000e0f602083018462000bd9565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000f8557600080fd5b5051919050565b600060001982141562000faf57634e487b7160e01b600052601160045260246000fd5b5060010190565b84815260806020820152600062000fd1608083018662000e49565b828103604084015262000fe5818662000e49565b91505060018060a01b038316606083015295945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906200102d9083018662000e49565b828103606084015262001041818662000e49565b9150508260808301529695505050505050565b602080825260159082015274496e76616c696420746f6b656e206164647265737360581b604082015260600190565b6020808252601190820152702ab9b2b91034b9903737ba1037bbb732b960791b604082015260600190565b6020808252825482820181905260008481528281209092916040850190845b81811015620010f45783546001600160a01b031683526001938401939285019201620010cd565b50909695505050505050565b6000602082840312156200111357600080fd5b815162000e0f8162000dd9565b6000602082840312156200113357600080fd5b81516001600160401b038111156200114a57600080fd5b8201601f810184136200115c57600080fd5b80516200116d62000d198262000ccc565b8181528560208385010111156200118357600080fd5b62000c7a82602083016020860162000e1656fe60806040523480156200001157600080fd5b5060405162000ebb38038062000ebb833981016040819052620000349162000353565b8251839083906200004d906003906020850190620001e0565b50805162000063906004906020840190620001e0565b50829150506001600160a01b038116620000c45760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064015b60405180910390fd5b620000d08286620000fb565b50600580546001600160a01b0319166001600160a01b0392909216919091179055506200044d915050565b6001600160a01b038216620001535760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000bb565b8060026000828254620001679190620003e9565b90915550506001600160a01b0382166000908152602081905260408120805483929062000196908490620003e9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001ee9062000410565b90600052602060002090601f0160209004810192826200021257600085556200025d565b82601f106200022d57805160ff19168380011785556200025d565b828001600101855582156200025d579182015b828111156200025d57825182559160200191906001019062000240565b506200026b9291506200026f565b5090565b5b808211156200026b576000815560010162000270565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002ae57600080fd5b81516001600160401b0380821115620002cb57620002cb62000286565b604051601f8301601f19908116603f01168101908282118183101715620002f657620002f662000286565b816040528381526020925086838588010111156200031357600080fd5b600091505b8382101562000337578582018301518183018401529082019062000318565b83821115620003495760008385830101525b9695505050505050565b600080600080608085870312156200036a57600080fd5b845160208601519094506001600160401b03808211156200038a57600080fd5b62000398888389016200029c565b94506040870151915080821115620003af57600080fd5b50620003be878288016200029c565b606087015190935090506001600160a01b0381168114620003de57600080fd5b939692955090935050565b600082198211156200040b57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200042557607f821691505b602082108114156200044757634e487b7160e01b600052602260045260246000fd5b50919050565b610a5e806200045d6000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806306fdde03146100b4578063095ea7b3146100d257806318160ddd146100f557806323b872dd14610107578063313ce5671461011a578063395093511461012957806370a082311461013c5780638da5cb5b1461016557806395d89b4114610190578063a0712d6814610198578063a457c2d7146101ad578063a9059cbb146101c0578063dd62ed3e146101d3575b600080fd5b6100bc6101e6565b6040516100c99190610862565b60405180910390f35b6100e56100e03660046108d3565b610278565b60405190151581526020016100c9565b6002545b6040519081526020016100c9565b6100e56101153660046108fd565b610290565b604051600081526020016100c9565b6100e56101373660046108d3565b6102b4565b6100f961014a366004610939565b6001600160a01b031660009081526020819052604090205490565b600554610178906001600160a01b031681565b6040516001600160a01b0390911681526020016100c9565b6100bc6102f3565b6101ab6101a636600461095b565b610302565b005b6100e56101bb3660046108d3565b610370565b6100e56101ce3660046108d3565b610402565b6100f96101e1366004610974565b610410565b6060600380546101f5906109a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610221906109a7565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b60003361028681858561043b565b5060019392505050565b60003361029e85828561055f565b6102a98585856105d9565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102ee9087906109e2565b61043b565b6060600480546101f5906109a7565b6005546001600160a01b031633146103575760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b60448201526064015b60405180910390fd5b60055461036d906001600160a01b031682610795565b50565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103f55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034e565b6102a9828686840361043b565b6000336102868185856105d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661049d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034e565b6001600160a01b0382166104fe5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061056b8484610410565b905060001981146105d357818110156105c65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161034e565b6105d3848484840361043b565b50505050565b6001600160a01b03831661063d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034e565b6001600160a01b03821661069f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034e565b6001600160a01b038316600090815260208190526040902054818110156107175760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034e565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061074e9084906109e2565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610a098339815191528460405161078891815260200190565b60405180910390a36105d3565b6001600160a01b0382166107eb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161034e565b80600260008282546107fd91906109e2565b90915550506001600160a01b0382166000908152602081905260408120805483929061082a9084906109e2565b90915550506040518181526001600160a01b03831690600090600080516020610a098339815191529060200160405180910390a35050565b600060208083528351808285015260005b8181101561088f57858101830151858201604001528201610873565b818111156108a1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108ce57600080fd5b919050565b600080604083850312156108e657600080fd5b6108ef836108b7565b946020939093013593505050565b60008060006060848603121561091257600080fd5b61091b846108b7565b9250610929602085016108b7565b9150604084013590509250925092565b60006020828403121561094b57600080fd5b610954826108b7565b9392505050565b60006020828403121561096d57600080fd5b5035919050565b6000806040838503121561098757600080fd5b610990836108b7565b915061099e602084016108b7565b90509250929050565b600181811c908216806109bb57607f821691505b602082108114156109dc57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610a0357634e487b7160e01b600052601160045260246000fd5b50019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122094c987657665c238adb58c41cea1cb48ac72fdf6fdc212543d393d6fb0553fa264736f6c634300080b003360806040523480156200001157600080fd5b506040516200235e3803806200235e8339810160408190526200003491620000b2565b806001600160a01b038116620000825760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640160405180910390fd5b50600080546001600160a01b039092166001600160a01b03199283161790556001805490911633179055620000e4565b600060208284031215620000c557600080fd5b81516001600160a01b0381168114620000dd57600080fd5b9392505050565b61226a80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80636bef7a2b1461007d578063873deb04146100925780638c75d7b4146100bb578063966dae0e146100dd5780639ecebe2a146100f0578063c31f271014610115578063d550a5d414610128578063e09d6c3614610183575b600080fd5b61009061008b366004611c4e565b610196565b005b6000546100a5906001600160a01b031681565b6040516100b29190611cb0565b60405180910390f35b6100ce6100c9366004611cc4565b610d84565b6040516100b293929190611d1c565b6001546100a5906001600160a01b031681565b6101036100fe366004611d91565b611148565b6040516100b296959493929190611df1565b610090610123366004611e3f565b6111ad565b61013b610136366004611ea0565b6114d6565b6040516100b291908151151581526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b610090610191366004611f27565b611960565b80606001518160400151600082116101c95760405162461bcd60e51b81526004016101c090611fd8565b60405180910390fd5b600081116101e95760405162461bcd60e51b81526004016101c090611fd8565b60208301516001600160a01b0381166102145760405162461bcd60e51b81526004016101c090612009565b6020840151600154604051632f1d7fa760e01b81526000916001600160a01b031690632f1d7fa79061024a908590600401611cb0565b602060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190612032565b6001600160a01b031614156102e05760405162461bcd60e51b815260206004820152601b60248201527a115e18da185b99d95c88199bdc88191998481b9bdd08199bdd5b99602a1b60448201526064016101c0565b60608501516000546040516370a0823160e01b815282916001600160a01b0316906370a0823190610315903390600401611cb0565b602060405180830381865afa158015610332573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610356919061204f565b10156103a45760405162461bcd60e51b815260206004820152601f60248201527f53656e64657220646f6573206e6f74206861766520656e6f756768206466610060448201526064016101c0565b600054604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610416919061204f565b10156104635760405162461bcd60e51b815260206004820152601c60248201527b105b5bdd5b9d081bd988111190481a5cc81b9bdd08185b1b1bddd95960221b60448201526064016101c0565b6001546020870151604051632f1d7fa760e01b81526000926001600160a01b031691632f1d7fa7916104989190600401611cb0565b602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190612032565b60005460608901516040516323b872dd60e01b8152336004820152306024820152604481019190915291925082916001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f9190612078565b506000816001600160a01b031663d550a5d460405180608001604052808c60000151600181111561059257610592611dbd565b8152600080546001600160a01b031660208301526060808f01516040808501919091528f810151919093015290516001600160e01b031960e085901b1681526105df9291906004016120c8565b60a060405180830381865afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062091906120e3565b905060008951600181111561063757610637611dbd565b14156108955780511561076557600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb9261067e929091600401612145565b6020604051808303816000875af115801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190612078565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f27109161071f9160040161215e565b600060405180830381600087803b15801561073957600080fd5b505af115801561074d573d6000803e3d6000fd5b5050600060608c0181905260408c015250610d799050565b600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b6000015160018111156107af576107af611dbd565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff1990911690838181111561081757610817611dbd565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff191690838181111561088957610889611dbd565b02179055505050610d79565b805180156108a7575060008960600151115b80156108b7575060008960400151115b15610c305788606001518160600151111580156108dc57508860400151816080015111155b15610a29576000546020820151606083015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb9261091b929091600401612145565b6020604051808303816000875af115801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190612078565b506040805160a0810182526000546001600160a01b039081168252606080850151602084015260808086015184860152858501519184019190915233908301529151630c31f27160e41b81529184169163c31f2710916109c09160040161215e565b600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b50505050806060015189606001818151610a0891906121b5565b905250608081015160408a018051610a219083906121b5565b905250610b45565b600054602082015160608b015160405163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92610a63929091600401612145565b6020604051808303816000875af1158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190612078565b506040805160a0810182526000546001600160a01b0390811682526060808d015160208401528c8401518385015284840151908301523360808301529151630c31f27160e41b81529184169163c31f271091610b049160040161215e565b600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b5050600060608c0181905260408c015250505b60608901511580610b5857506040890151155b15610b6257610c30565b816001600160a01b031663d550a5d460405180608001604052808c600001516001811115610b9257610b92611dbd565b81526000546001600160a01b031660208201526060808e01516040808401919091528e8101519190920152840151610bcb9060016121cc565b6040518363ffffffff1660e01b8152600401610be89291906120c8565b60a060405180830381865afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2991906120e3565b9050610895565b60008960400151118015610c48575060008960600151115b15610d7957600260008a602001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808b600001516001811115610c9757610c97611dbd565b815233602082015260408c810151908201526060808d0151908201526080808d01519082015260a00160009052815460018181018455600093845260209093208251600590920201805492939092839160ff19909116908381811115610cff57610cff611dbd565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b03199091161781556040820151600180830191909155606083015160028301556080830151600383015560a08301516004830180549192909160ff1916908381811115610d7157610d71611dbd565b021790555050505b505050505050505050565b60608080836001600160a01b038116610daf5760405162461bcd60e51b81526004016101c090612009565b6001600160a01b038516600090815260026020908152604080832080548251818502810185019093528083529192909190849084015b82821015610ea9576000848152602090206040805160c08101909152600584029091018054829060ff166001811115610e2057610e20611dbd565b6001811115610e3157610e31611dbd565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115610e8557610e85611dbd565b6001811115610e9657610e96611dbd565b8152505081526020019060010190610de5565b5050505090506000805b8251811015610f3c576000838281518110610ed057610ed06121e4565b602002602001015160a001516001811115610eed57610eed611dbd565b148015610f17575042838281518110610f0857610f086121e4565b60200260200101516080015110155b15610f2a5781610f26816121fa565b9250505b80610f34816121fa565b915050610eb3565b506000816001600160401b03811115610f5757610f57611bb4565b604051908082528060200260200182016040528015610f80578160200160208202803683370190505b5090506000826001600160401b03811115610f9d57610f9d611bb4565b604051908082528060200260200182016040528015610fc6578160200160208202803683370190505b5090506000836001600160401b03811115610fe357610fe3611bb4565b60405190808252806020026020018201604052801561100c578160200160208202803683370190505b5090506000805b8651811015611137576000878281518110611030576110306121e4565b602002602001015160a00151600181111561104d5761104d611dbd565b148015611077575042878281518110611068576110686121e4565b60200260200101516080015110155b15611125576000878281518110611090576110906121e4565b6020026020010151905080602001518684815181106110b1576110b16121e4565b60200260200101906001600160a01b031690816001600160a01b03168152505080604001518584815181106110e8576110e86121e4565b602002602001018181525050806060015184848151811061110b5761110b6121e4565b60209081029190910101526111216001846121cc565b9250505b8061112f816121fa565b915050611013565b50929a919950975095505050505050565b6002602052816000526040600020818154811061116457600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff80851697506101009094046001600160a01b031695509193909290911686565b80602001518160400151600082116111d75760405162461bcd60e51b81526004016101c090611fd8565b600081116111f75760405162461bcd60e51b81526004016101c090611fd8565b82516001600160a01b03811661121f5760405162461bcd60e51b81526004016101c090612009565b8351600154604051632f1d7fa760e01b815233916001600160a01b031690632f1d7fa790611251908590600401611cb0565b602060405180830381865afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190612032565b6001600160a01b0316146112e25760405162461bcd60e51b815260206004820152601760248201527629b2b73232b91034b9903737ba1032bc31b430b733b2b960491b60448201526064016101c0565b60808501516001600160a01b03811661130d5760405162461bcd60e51b81526004016101c090612009565b85516001600160a01b0316600090815260026020526040812060608801518154811061133b5761133b6121e4565b90600052602060002090600502019050866020015181600101600082825461136391906121b5565b909155505060408701516002820180546000906113819084906121b5565b9091555060009050815460ff16600181111561139f5761139f611dbd565b14806113ad57506001810154155b806113ba57506002810154155b156113cf5760048101805460ff191660011790555b60005460808801516040808a0151905163a9059cbb60e01b81526001600160a01b039093169263a9059cbb92611409929091600401612145565b6020604051808303816000875af1158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190612078565b508054600054600283015460808a8101518b516020808e0151604080516001600160a01b03610100909a048a16815297891692880192909252868201959095529186166060860152949094169083015260a082015290517f3fcd82abd7b4aa2dae161019e066c1909e297f3a20b3b4757ef4aa36b1a122429181900360c00190a150505050505050565b6115136040518060a0016040528060001515815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b826040015183606001516000821161153d5760405162461bcd60e51b81526004016101c090611fd8565b6000811161155d5760405162461bcd60e51b81526004016101c090611fd8565b60208501516001600160a01b0381166115885760405162461bcd60e51b81526004016101c090612009565b6020808701516001600160a01b031660009081526002825260408082208054825181860281018601909352808352929391929091849084015b82821015611685576000848152602090206040805160c08101909152600584029091018054829060ff1660018111156115fc576115fc611dbd565b600181111561160d5761160d611dbd565b8152815461010090046001600160a01b0316602082015260018083015460408301526002830154606083015260038301546080830152600483015460a09092019160ff169081111561166157611661611dbd565b600181111561167257611672611dbd565b81525050815260200190600101906115c1565b5092935088925050505b815181101561191b5760008282815181106116ac576116ac6121e4565b602002602001015190506001808111156116c8576116c8611dbd565b8160a0015160018111156116de576116de611dbd565b14806116ed5750428160800151105b156116f85750611909565b6000808251600181111561170e5761170e611dbd565b14801561172d575060008a51600181111561172b5761172b611dbd565b145b1561177b5761177460405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611b1b565b90506118b6565b60008251600181111561179057611790611dbd565b1480156117af575060018a5160018111156117ad576117ad611dbd565b145b156117f65761177460405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611b3d565b60018251600181111561180b5761180b611dbd565b14801561182a575060008a51600181111561182857611828611dbd565b145b1561187157611774604051806040016040528084604001518152602001846060015181525060405180604001604052808d6060015181526020018d60400151815250611b3d565b6118b360405180604001604052808c6060015181526020018c604001518152506040518060400160405280856040015181526020018560600151815250611b88565b90505b8015611906576040518060a0016040528060011515815260200183602001516001600160a01b03168152602001848152602001836040015181526020018360600151815250975050505050611957565b50505b80611913816121fa565b91505061168f565b506040518060a0016040528060001515815260200160006001600160a01b03168152602001600081526020016000815260200160008152509450505b50505092915050565b6001546001600160a01b031633146119b25760405162461bcd60e51b815260206004820152601560248201527443616c6c6572206973206e6f7420666163746f727960581b60448201526064016101c0565b60005b8151811015611b17576000600260008484815181106119d6576119d66121e4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905060005b8154811015611b02576000828281548110611a2057611a206121e4565b6000918252602082206005909102019150600482015460ff166001811115611a4a57611a4a611dbd565b148015611a5a5750428160030154105b15611aef576004818101805460ff191660011790556000548254600284015460405163a9059cbb60e01b81526001600160a01b039384169463a9059cbb94611aaa94610100900416929101612145565b6020604051808303816000875af1158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190612078565b505b5080611afa816121fa565b915050611a03565b50508080611b0f906121fa565b9150506119b5565b5050565b60208101518251600091148015611b36575060208301518251145b9392505050565b80518251600091611b4d91612215565b82602001518460200151611b619190612215565b148015611b7357506020820151835110155b8015611b365750505160209190910151101590565b80518251600091611b9891612215565b82602001518460200151611bac9190612215565b149392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715611bec57611bec611bb4565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611c1a57611c1a611bb4565b604052919050565b803560028110611c3157600080fd5b919050565b6001600160a01b0381168114611c4b57600080fd5b50565b600060a08284031215611c6057600080fd5b611c68611bca565b611c7183611c22565b81526020830135611c8181611c36565b806020830152506040830135604082015260608301356060820152608083013560808201528091505092915050565b6001600160a01b0391909116815260200190565b600060208284031215611cd657600080fd5b8135611b3681611c36565b600081518084526020808501945080840160005b83811015611d1157815187529582019590820190600101611cf5565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b82811015611d5e5781516001600160a01b031684529284019290840190600101611d39565b50505083810382850152611d728187611ce1565b9150508281036040840152611d878185611ce1565b9695505050505050565b60008060408385031215611da457600080fd5b8235611daf81611c36565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60028110611c4b57634e487b7160e01b600052602160045260246000fd5b60c08101611dfe88611dd3565b8782526001600160a01b0387166020830152604082018690526060820185905260808201849052611e2e83611dd3565b8260a0830152979650505050505050565b600060a08284031215611e5157600080fd5b611e59611bca565b8235611e6481611c36565b808252506020830135602082015260408301356040820152606083013560608201526080830135611e9481611c36565b60808201529392505050565b60008082840360a0811215611eb457600080fd5b6080811215611ec257600080fd5b50604051608081016001600160401b0381118282101715611ee557611ee5611bb4565b604052611ef184611c22565b81526020840135611f0181611c36565b602082015260408481013590820152606080850135908201529460809093013593505050565b60006020808385031215611f3a57600080fd5b82356001600160401b0380821115611f5157600080fd5b818501915085601f830112611f6557600080fd5b813581811115611f7757611f77611bb4565b8060051b9150611f88848301611bf2565b8181529183018401918481019088841115611fa257600080fd5b938501935b83851015611fcc5784359250611fbc83611c36565b8282529385019390850190611fa7565b98975050505050505050565b6020808252601790820152764e756d62657220697320657175616c20746f207a65726f60481b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b60006020828403121561204457600080fd5b8151611b3681611c36565b60006020828403121561206157600080fd5b5051919050565b80518015158114611c3157600080fd5b60006020828403121561208a57600080fd5b611b3682612068565b805161209e81611dd3565b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b60a081016120d68285612093565b8260808301529392505050565b600060a082840312156120f557600080fd5b6120fd611bca565b61210683612068565b8152602083015161211681611c36565b806020830152506040830151604082015260608301516060820152608083015160808201528091505092915050565b6001600160a01b03929092168252602082015260400190565b81516001600160a01b039081168252602080840151908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b634e487b7160e01b600052601160045260246000fd5b6000828210156121c7576121c761219f565b500390565b600082198211156121df576121df61219f565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561220e5761220e61219f565b5060010190565b600081600019048311821515161561222f5761222f61219f565b50029056fea26469706673582212208a8b5fcd56a07b46eb26737f000a18cd79ca0f36673eeff1a4ed18c7a201040b64736f6c634300080b0033a2646970667358221220b20f710de1327fbe38065b79f2577bb356857d7e61da6eb9a3ff53ffae5f66ef64736f6c634300080b0033";

    public static final String FUNC_CREATEDFA = "createDfa";

    public static final String FUNC_VERIFYUSER = "verifyUser";

    public static final String FUNC_GETEXCHANGER = "getExchanger";

    public static final String FUNC_GETALLDFA = "getAllDfa";

    public static final String FUNC_GETALLDFAADDRESSES = "getAllDfaAddresses";

    public static final String FUNC_GETBALANCES = "getBalances";

    public static final String FUNC_CLOSEOLDREQUESTS = "closeOldRequests";

    public static final Event DFACREATED_EVENT = new Event("DFACreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERVERIFIED_EVENT = new Event("UserVerified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xc0FC2e45e3165a9758bcee23Ec54315f023Cd054");
    }

    @Deprecated
    protected Factory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Factory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Factory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Factory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DFACreatedEventResponse> getDFACreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DFACREATED_EVENT, transactionReceipt);
        ArrayList<DFACreatedEventResponse> responses = new ArrayList<DFACreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DFACreatedEventResponse typedResponse = new DFACreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.whoCreate = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dfaAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.initialSupply = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DFACreatedEventResponse> dFACreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DFACreatedEventResponse>() {
            @Override
            public DFACreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DFACREATED_EVENT, log);
                DFACreatedEventResponse typedResponse = new DFACreatedEventResponse();
                typedResponse.log = log;
                typedResponse.whoCreate = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dfaAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.symbol = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.initialSupply = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DFACreatedEventResponse> dFACreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DFACREATED_EVENT));
        return dFACreatedEventFlowable(filter);
    }

    public List<UserVerifiedEventResponse> getUserVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERVERIFIED_EVENT, transactionReceipt);
        ArrayList<UserVerifiedEventResponse> responses = new ArrayList<UserVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserVerifiedEventResponse typedResponse = new UserVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserVerifiedEventResponse> userVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UserVerifiedEventResponse>() {
            @Override
            public UserVerifiedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERVERIFIED_EVENT, log);
                UserVerifiedEventResponse typedResponse = new UserVerifiedEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UserVerifiedEventResponse> userVerifiedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERVERIFIED_EVENT));
        return userVerifiedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createDfa(BigInteger initialSupply, String name, String symbol) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEDFA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialSupply), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyUser(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFYUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getExchanger(String dfaAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEXCHANGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dfaAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>> getAllDfa() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLDFA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<String>, List<String>, List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Address>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<List> getAllDfaAddresses() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETALLDFAADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>> getBalances() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBALANCES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> closeOldRequests() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSEOLDREQUESTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Factory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Factory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Factory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Factory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Factory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Factory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Factory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Factory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Factory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Factory.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Factory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Factory.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Factory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Factory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Factory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Factory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DFACreatedEventResponse extends BaseEventResponse {
        public String whoCreate;

        public String dfaAddress;

        public String name;

        public String symbol;

        public BigInteger initialSupply;
    }

    public static class UserVerifiedEventResponse extends BaseEventResponse {
        public String user;
    }
}
